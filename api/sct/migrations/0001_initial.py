# Generated by Django 5.2 on 2025-05-06 17:08

import django.core.validators
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iban', models.CharField(help_text='Número de cuenta IBAN', max_length=34, validators=[django.core.validators.RegexValidator(message='Formato IBAN inválido', regex='^[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}$')])),
                ('currency', models.CharField(help_text='Código de moneda ISO 4217', max_length=3, validators=[django.core.validators.RegexValidator(message='Código de moneda ISO 4217 inválido', regex='^[A-Z]{3}$')])),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(help_text='Código de país ISO 3166-1 alpha-2', max_length=2, validators=[django.core.validators.MinLengthValidator(2), django.core.validators.MaxLengthValidator(2)])),
                ('street_and_house_number', models.CharField(blank=True, help_text='Calle y número', max_length=70)),
                ('zip_code_and_city', models.CharField(blank=True, help_text='Código postal y ciudad', max_length=70)),
            ],
            options={
                'verbose_name_plural': 'Addresses',
            },
        ),
        migrations.CreateModel(
            name='CategoryPurpose',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Category purpose code as per ISO 20022.', max_length=4)),
                ('description', models.CharField(blank=True, max_length=140, null=True)),
            ],
            options={
                'verbose_name': 'Category Purpose',
                'verbose_name_plural': 'Category Purposes',
            },
        ),
        migrations.CreateModel(
            name='CreditorAgent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('financial_institution_id', models.CharField(max_length=35)),
            ],
        ),
        migrations.CreateModel(
            name='ErrorResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.IntegerField()),
                ('message', models.CharField(max_length=255)),
                ('message_id', models.CharField(blank=True, max_length=36)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='InstructedAmount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('currency', models.CharField(max_length=3, validators=[django.core.validators.RegexValidator(message='Código de moneda ISO 4217 inválido', regex='^[A-Z]{3}$')])),
            ],
        ),
        migrations.CreateModel(
            name='LocalInstrument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Local instrument code as per ISO 20022.', max_length=4)),
                ('description', models.CharField(blank=True, max_length=140, null=True)),
            ],
            options={
                'verbose_name': 'Local Instrument',
                'verbose_name_plural': 'Local Instruments',
            },
        ),
        migrations.CreateModel(
            name='PaymentIdentification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('end_to_end_id', models.CharField(max_length=36)),
                ('instruction_id', models.CharField(max_length=36)),
            ],
        ),
        migrations.CreateModel(
            name='SepaCreditTransferRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idempotency_key', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('transaction_status', models.CharField(choices=[('RJCT', 'RJCT'), ('RCVD', 'RCVD'), ('ACCP', 'ACCP'), ('ACTP', 'ACTP'), ('ACSP', 'ACSP'), ('ACWC', 'ACWC'), ('ACWP', 'ACWP'), ('ACCC', 'ACCC'), ('CANC', 'CANC'), ('PDNG', 'PDNG')], default='PDNG', max_length=10)),
                ('purpose_code', models.CharField(blank=True, default='SEPA', max_length=4, null=True)),
                ('payment_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('auth_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('requested_execution_date', models.DateField(auto_now_add=True, null=True)),
                ('debtor_name', models.CharField(choices=[('---', '---'), ('MIRYA TRADING CO LTD', 'MIRYA TRADING CO LTD'), ('ZAIBATSUS.L.', 'ZAIBATSUS.L.'), ('ELIZABETH GARDEN GROUP S.L.', 'ELIZABETH GARDEN GROUP S.L.'), ('REVSTAR GLOBAL INTERNATIONAL LTD', 'REVSTAR GLOBAL INTERNATIONAL LTD'), ('ECLIPS CORPORATION LTD.', 'ECLIPS CORPORATION LTD.'), ('CDG SYSTEM LTD', 'CDG SYSTEM LTD'), ('BFP FINANCE SERVICE S.L.', 'BFP FINANCE SERVICE S.L.'), ('MOHAMMAD REZA NAJAFI KALASHI', 'MOHAMMAD REZA NAJAFI KALASHI'), ('SERVICES ET PUBLICITÉ ONLINE LTD', 'SERVICES ET PUBLICITÉ ONLINE LTD'), ('XXX', 'XXX')], default='MIRYA TRADING CO LTD', max_length=140)),
                ('debtor_adress_street_and_house_number', models.CharField(choices=[('---', '---'), ('TAUNUSANLAGE 12', 'TAUNUSANLAGE 12'), ('CALLE IPARRAGUIRRE 20', 'CALLE IPARRAGUIRRE 20'), ('CALLE GENERAL RICARDOS 12 PLANTA 4, PUERTA E', 'CALLE GENERAL RICARDOS 12 PLANTA 4, PUERTA E'), ('PAVILION DR BARCLAYCARD HOUSE', 'PAVILION DR BARCLAYCARD HOUSE'), ('CENTENARY SQUARE 1', 'CENTENARY SQUARE 1'), ('MAXIMILIANSTRASSE 54', 'MAXIMILIANSTRASSE 54'), ('PZ CATALUNYA NUM.1', 'PZ CATALUNYA NUM.1'), ('WESELER STRABE 230', 'WESELER STRABE 230'), ('WESTFERRY CIRCUS 7', 'WESTFERRY CIRCUS 7'), ('XXX', 'XXX')], default='TAUNUSANLAGE 12', max_length=70)),
                ('debtor_adress_zip_code_and_city', models.CharField(choices=[('---', '---'), ('60325 FRANKFURT', '60325 FRANKFURT'), ('48009 BILBAO', '48009 BILBAO'), ('28012 MADRID', '28012 MADRID'), ('NN4 75G NORTHAMPTON', 'NN4 75G NORTHAMPTON'), ('B1 1HQ BIRMINGHAM', 'B1 1HQ BIRMINGHAM'), ('80538 MÜNCHEN', '80538 MÜNCHEN'), ('08850 GAVA', '08850 GAVA'), ('48151 MÜNSTER', '48151 MÜNSTER'), ('E14 4HD LONDON', 'E14 4HD LONDON'), ('XXX', 'XXX')], default='60325 FRANKFURT', max_length=70)),
                ('debtor_adress_country', models.CharField(choices=[('--', '--'), ('DE', 'Germany'), ('ES', 'Spain'), ('GB', 'Great Britain'), ('UK', 'United Kingdom'), ('FR', 'France')], default='DE', max_length=2)),
                ('debtor_account_iban', models.CharField(choices=[('---', '---'), ('DE86500700100925993805', 'DE86500700100925993805'), ('ES3901821250410201520178', 'ES3901821250410201520178'), ('ES7901824036500201650056', 'ES7901824036500201650056'), ('GB69BUKB20041558708288', 'GB69BUKB20041558708288'), ('GB43HBUK40127669998520', 'GB43HBUK40127669998520'), ('DE64202208000053288296', 'DE64202208000053288296'), ('ES5868880001643861269006', 'ES5868880001643861269006'), ('DE41400501500154813455', 'DE41400501500154813455'), ('GB33REVO00996939552283', 'GB33REVO00996939552283'), ('XXX', 'XXX')], default='DE86500700100925993805', max_length=34)),
                ('debtor_account_bic', models.CharField(choices=[('---', '---'), ('DEUTDEFFXXX', 'DEUTDEFFXXX'), ('BBVAESMMXXX', 'BBVAESMMXXX'), ('BUKBGB22XXX', 'BUKBGB22XXX'), ('HBUKGB4BXXX', 'HBUKGB4BXXX'), ('SXPYDEHHXXX', 'SXPYDEHHXXX'), ('QNTOESB2XXX', 'QNTOESB2XXX'), ('WELADED1MST', 'WELADED1MST'), ('REVOGB21XXX', 'REVOGB21XXX'), ('XXX', 'XXX')], default='DEUTDEFFXXX', max_length=11)),
                ('debtor_account_currency', models.CharField(choices=[('---', '---'), ('EUR', 'EUR'), ('GBP', 'GBP'), ('USD', 'USD'), ('JPY', 'JPY')], default='EUR', max_length=3)),
                ('payment_identification_end_to_end_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('payment_identification_instruction_id', models.CharField(blank=True, max_length=35, null=True)),
                ('instructed_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('instructed_currency', models.CharField(choices=[('---', '---'), ('EUR', 'EUR'), ('GBP', 'GBP'), ('USD', 'USD'), ('JPY', 'JPY')], max_length=3)),
                ('creditor_name', models.CharField(choices=[('---', '---'), ('MIRYA TRADING CO LTD', 'MIRYA TRADING CO LTD'), ('ZAIBATSUS.L.', 'ZAIBATSUS.L.'), ('ELIZABETH GARDEN GROUP S.L.', 'ELIZABETH GARDEN GROUP S.L.'), ('REVSTAR GLOBAL INTERNATIONAL LTD', 'REVSTAR GLOBAL INTERNATIONAL LTD'), ('ECLIPS CORPORATION LTD.', 'ECLIPS CORPORATION LTD.'), ('CDG SYSTEM LTD', 'CDG SYSTEM LTD'), ('BFP FINANCE SERVICE S.L.', 'BFP FINANCE SERVICE S.L.'), ('MOHAMMAD REZA NAJAFI KALASHI', 'MOHAMMAD REZA NAJAFI KALASHI'), ('SERVICES ET PUBLICITÉ ONLINE LTD', 'SERVICES ET PUBLICITÉ ONLINE LTD'), ('XXX', 'XXX')], default='', max_length=70)),
                ('creditor_adress_street_and_house_number', models.CharField(choices=[('---', '---'), ('TAUNUSANLAGE 12', 'TAUNUSANLAGE 12'), ('CALLE IPARRAGUIRRE 20', 'CALLE IPARRAGUIRRE 20'), ('CALLE GENERAL RICARDOS 12 PLANTA 4, PUERTA E', 'CALLE GENERAL RICARDOS 12 PLANTA 4, PUERTA E'), ('PAVILION DR BARCLAYCARD HOUSE', 'PAVILION DR BARCLAYCARD HOUSE'), ('CENTENARY SQUARE 1', 'CENTENARY SQUARE 1'), ('MAXIMILIANSTRASSE 54', 'MAXIMILIANSTRASSE 54'), ('PZ CATALUNYA NUM.1', 'PZ CATALUNYA NUM.1'), ('WESELER STRABE 230', 'WESELER STRABE 230'), ('WESTFERRY CIRCUS 7', 'WESTFERRY CIRCUS 7'), ('XXX', 'XXX')], default='', max_length=70)),
                ('creditor_adress_zip_code_and_city', models.CharField(choices=[('---', '---'), ('60325 FRANKFURT', '60325 FRANKFURT'), ('48009 BILBAO', '48009 BILBAO'), ('28012 MADRID', '28012 MADRID'), ('NN4 75G NORTHAMPTON', 'NN4 75G NORTHAMPTON'), ('B1 1HQ BIRMINGHAM', 'B1 1HQ BIRMINGHAM'), ('80538 MÜNCHEN', '80538 MÜNCHEN'), ('08850 GAVA', '08850 GAVA'), ('48151 MÜNSTER', '48151 MÜNSTER'), ('E14 4HD LONDON', 'E14 4HD LONDON'), ('XXX', 'XXX')], default='', max_length=70)),
                ('creditor_adress_country', models.CharField(choices=[('--', '--'), ('DE', 'Germany'), ('ES', 'Spain'), ('GB', 'Great Britain'), ('UK', 'United Kingdom'), ('FR', 'France')], default='', max_length=2)),
                ('creditor_account_iban', models.CharField(choices=[('---', '---'), ('DE86500700100925993805', 'DE86500700100925993805'), ('ES3901821250410201520178', 'ES3901821250410201520178'), ('ES7901824036500201650056', 'ES7901824036500201650056'), ('GB69BUKB20041558708288', 'GB69BUKB20041558708288'), ('GB43HBUK40127669998520', 'GB43HBUK40127669998520'), ('DE64202208000053288296', 'DE64202208000053288296'), ('ES5868880001643861269006', 'ES5868880001643861269006'), ('DE41400501500154813455', 'DE41400501500154813455'), ('GB33REVO00996939552283', 'GB33REVO00996939552283'), ('XXX', 'XXX')], default='', max_length=34)),
                ('creditor_account_bic', models.CharField(choices=[('---', '---'), ('DEUTDEFFXXX', 'DEUTDEFFXXX'), ('BBVAESMMXXX', 'BBVAESMMXXX'), ('BUKBGB22XXX', 'BUKBGB22XXX'), ('HBUKGB4BXXX', 'HBUKGB4BXXX'), ('SXPYDEHHXXX', 'SXPYDEHHXXX'), ('QNTOESB2XXX', 'QNTOESB2XXX'), ('WELADED1MST', 'WELADED1MST'), ('REVOGB21XXX', 'REVOGB21XXX'), ('XXX', 'XXX')], default='', max_length=11)),
                ('creditor_account_currency', models.CharField(choices=[('---', '---'), ('EUR', 'EUR'), ('GBP', 'GBP'), ('USD', 'USD'), ('JPY', 'JPY')], default='', max_length=3)),
                ('creditor_agent_financial_institution_id', models.CharField(choices=[('---', '---'), ('DEUTSCHE BANK AG', 'DEUTSCHE BANK AG'), ('BANCO BILBAO VIZCAYA ARGENTARIA S.A.', 'BANCO BILBAO VIZCAYA ARGENTARIA S.A.'), ('BARCLAYS BANK UK PLC', 'BARCLAYS BANK UK PLC'), ('HSBC UK BANK PLC', 'HSBC UK BANK PLC'), ('BANKING CIRCLE', 'BANKING CIRCLE'), ('OLINDA SAS SUCURSAL EN ESPAÑA', 'OLINDA SAS SUCURSAL EN ESPAÑA'), ('SPARKASSE MÜNSTERLAND OST', 'SPARKASSE MÜNSTERLAND OST'), ('REVOLUT LIMITED', 'REVOLUT LIMITED'), ('XXX', 'XXX')], default='', max_length=255)),
                ('remittance_information_structured', models.CharField(blank=True, max_length=10, null=True)),
                ('remittance_information_unstructured', models.CharField(blank=True, max_length=10, null=True)),
            ],
            options={
                'verbose_name': 'SEPA Credit Transfer Request',
                'verbose_name_plural': 'SEPA Credit Transfer Requests',
            },
        ),
        migrations.CreateModel(
            name='ServiceLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Service level code as per ISO 20022.', max_length=4)),
                ('description', models.CharField(blank=True, max_length=140, null=True)),
            ],
            options={
                'verbose_name': 'Service Level',
                'verbose_name_plural': 'Service Levels',
            },
        ),
        migrations.CreateModel(
            name='Creditor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creditor_name', models.CharField(max_length=70)),
                ('creditor_postal_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sct.address')),
            ],
        ),
        migrations.CreateModel(
            name='Debtor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('debtor_name', models.CharField(max_length=140)),
                ('debtor_postal_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sct.address')),
            ],
        ),
        migrations.CreateModel(
            name='SepaCreditTransfer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_id', models.UUIDField(editable=False, unique=True)),
                ('auth_id', models.UUIDField(editable=False)),
                ('transaction_status', models.CharField(choices=[('RJCT', 'Rejected'), ('RCVD', 'Received'), ('ACCP', 'Accepted'), ('ACTC', 'AcceptedTechnical'), ('ACSP', 'AcceptedSettlement'), ('ACSC', 'AcceptedSettlementCompleted'), ('ACWC', 'AcceptedWithChange'), ('ACWP', 'AcceptedWithoutPosting'), ('ACCC', 'AcceptedClearing'), ('CANC', 'Cancelled'), ('PDNG', 'Pending')], max_length=4)),
                ('end_to_end_id', models.CharField(blank=True, max_length=36, validators=[django.core.validators.MinLengthValidator(36), django.core.validators.MaxLengthValidator(36)])),
                ('instruction_id', models.CharField(blank=True, max_length=36, validators=[django.core.validators.MinLengthValidator(36), django.core.validators.MaxLengthValidator(36)])),
                ('purpose_code', models.CharField(blank=True, max_length=4, validators=[django.core.validators.MinLengthValidator(4), django.core.validators.MaxLengthValidator(4)])),
                ('requested_execution_date', models.DateField(blank=True, null=True)),
                ('remittance_information_structured', models.CharField(blank=True, max_length=140)),
                ('remittance_information_unstructured', models.CharField(blank=True, max_length=140)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('creditor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sct.creditor')),
                ('creditor_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='creditor_accounts', to='sct.account')),
                ('creditor_agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sct.creditoragent')),
                ('debtor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sct.debtor')),
                ('debtor_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='debtor_accounts', to='sct.account')),
                ('instructed_amount', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sct.instructedamount')),
            ],
            options={
                'verbose_name': 'SEPA Credit Transfer',
                'verbose_name_plural': 'SEPA Credit Transfers',
            },
        ),
        migrations.CreateModel(
            name='SepaCreditTransferDetailsResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_status', models.CharField(choices=[('RJCT', 'Rejected'), ('RCVD', 'Received'), ('ACCP', 'Accepted'), ('ACTC', 'Accepted Technical Validation'), ('ACSP', 'Accepted Settlement in Process'), ('ACSC', 'Accepted Settlement Completed'), ('ACWC', 'Accepted with Change'), ('ACWP', 'Accepted with Pending'), ('ACCC', 'Accepted Credit Check'), ('CANC', 'Cancelled'), ('PDNG', 'Pending')], max_length=10)),
                ('purpose_code', models.CharField(blank=True, max_length=4, null=True)),
                ('requested_execution_date', models.DateField(blank=True, null=True)),
                ('debtor_name', models.CharField(max_length=140)),
                ('debtor_adress_street_and_house_number', models.CharField(blank=True, max_length=70, null=True)),
                ('debtor_adress_zip_code_and_city', models.CharField(blank=True, max_length=70, null=True)),
                ('debtor_adress_country', models.CharField(max_length=2)),
                ('debtor_account_iban', models.CharField(max_length=34)),
                ('debtor_account_bic', models.CharField(max_length=11)),
                ('debtor_account_currency', models.CharField(max_length=3)),
                ('creditor_name', models.CharField(max_length=70)),
                ('creditor_adress_street_and_house_number', models.CharField(blank=True, max_length=70, null=True)),
                ('creditor_adress_zip_code_and_city', models.CharField(blank=True, max_length=70, null=True)),
                ('creditor_adress_country', models.CharField(max_length=2)),
                ('creditor_account_iban', models.CharField(max_length=34)),
                ('creditor_account_bic', models.CharField(max_length=11)),
                ('creditor_account_currency', models.CharField(max_length=3)),
                ('creditor_agent_financial_institution_id', models.CharField(max_length=255)),
                ('payment_identification_end_to_end_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('payment_identification_instruction_id', models.CharField(blank=True, max_length=35, null=True)),
                ('instructed_amount', models.DecimalField(decimal_places=2, max_digits=15)),
                ('instructed_currency', models.CharField(max_length=3)),
                ('remittance_information_structured', models.CharField(blank=True, max_length=140, null=True)),
                ('remittance_information_unstructured', models.CharField(blank=True, max_length=140, null=True)),
                ('payment_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sct.sepacredittransferrequest')),
            ],
            options={
                'verbose_name': 'SEPA Credit Transfer Details Response',
                'verbose_name_plural': 'SEPA Credit Transfer Details Responses',
            },
        ),
        migrations.CreateModel(
            name='SepaCreditTransferResponse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_status', models.CharField(choices=[('RJCT', 'Rejected'), ('RCVD', 'Received'), ('ACCP', 'Accepted'), ('ACTC', 'Accepted Technical Validation'), ('ACSP', 'Accepted Settlement in Process'), ('ACSC', 'Accepted Settlement Completed'), ('ACWC', 'Accepted with Change'), ('ACWP', 'Accepted with Pending'), ('ACCC', 'Accepted Credit Check'), ('CANC', 'Cancelled'), ('PDNG', 'Pending')], max_length=10)),
                ('auth_id', models.UUIDField()),
                ('payment_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sct.sepacredittransferrequest')),
            ],
            options={
                'verbose_name': 'SEPA Credit Transfer Response',
                'verbose_name_plural': 'SEPA Credit Transfer Responses',
            },
        ),
        migrations.CreateModel(
            name='SepaCreditTransferUpdateScaRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('CREATE', 'Create'), ('CANCEL', 'Cancel')], max_length=10)),
                ('auth_id', models.UUIDField()),
                ('payment_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sct.sepacredittransferrequest')),
            ],
            options={
                'verbose_name': 'SEPA Credit Transfer Update SCA Request',
                'verbose_name_plural': 'SEPA Credit Transfer Update SCA Requests',
            },
        ),
    ]
