Actua como exterto programador en Django, especialista en presentar tu trabajo detallado, completo y ordenado; 
no vas a utilizar REST, solo HTML; 
analiza primero todo el archivo adjunto; 

Genera el models.py:
	con los datos completos detallados en el archivo adjunto,
	si tiene campos de ForeingKey aplícalos a los modelos.
	
	
Genera el forms:
	completo para todos los modelos,
	aplica form-control.
	
	
Genera la view completa para:
	ingresar los datos a los modelos,
	listar los datos ingresados a los modelos,
	enviar al banco los dados de la tranferencia en xml(pain.001) junto con el aml,
	la respuesta esperada del banco es un xml(pain.002),
	genera la view completa para revizar el status de la transacción,
	si hay mas views genéralas.

Genera las urls correspondientes.

Genera las plantillas necesarias.

Puntos Clave
	La aplicación será desplegada con conexión real al banco.
	No se requiere autenticación de los usuarios en el sistema Django.
	El sistema registra localmente todas las transacciones y sus estados.
	Debes registrar todoa los schemas y sus validaciones.
	Los xml deben generarse automáticamente al momento de enviar la transferencia, guardarlos en la carpeta schemas, y enviarlos.
	En los formularios se permite seleccionar o crear datos.

Adicionales
	Quiero que la aplicación registre en logs el contenido de las cabeceras de respuesta.
	Quiero que registre el cuerpo completo de la respuesta (response.text) junto con los headers.
	Quiero que los logs se agrupen en un archivo de log especial por transferencia.
	Aplicarás logs/transferencias/transferencia_<payment_id>.log;
	Quiero que esos logs incluyeran también los headers de la petición enviada con OTP.
	Deseo que estos archivos se mantengan indefinidamente.
	Me gustaría también que en la vista de detalle de cada transferencia haya un enlace para descargar o visualizar el archivo de log asociado
	Me gustaría también que si el log no existe (por ejemplo por un error de sistema o eliminación manual), se muestre un mensaje claro de "log no disponible"

Cabeceras

{
  "requestHeaders": {
    "Accept": "text/html, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8",
    "Accept-Encoding": "gzip, deflate, br, zstd",
    "Accept-Language": "es-CO",
    "Connection": "keep-alive",
    "Host": "api.db.com",
    "Priority": "u=0, i",
    "Sec-Fetch-Dest": "document",
    "Sec-Fetch-Mode": "navigate",
    "Sec-Fetch-Site": "none",
    "Sec-Fetch-User": "?1",
    "Upgrade-Insecure-Requests": "1",
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0"
  },
  "responseHeaders": {
    "X-Firefox-Spdy": "h2",
    "access-control-allow-credentials": "true",
    "access-control-allow-headers": "
    idempotency-id, 
    process-id, 
    otp, 
    Correlation-ID, 
    Origin, 
    Accept, 
    X-Requested-With, 
    Content-Type, 
    Access-Control-Request-Method, 
    Access-Control-Request-Headers, 
    Authorization, 
    Cookie, 
    X-Frame-Options, 
    X-Content-Type-Options, 
    Strict-Transport-Security, 
    previewsignature",
    "access-control-allow-methods": "GET, POST, PATCH, HEAD, OPTIONS, DELETE",
    "access-control-allow-origin": "",
    "access-control-max-age": "3628800",
    "alt-svc": "h3=\":443\"; ma=2592000, h3-29=\":443\"; ma=2592000",
    "content-length": "173",
    "content-type": "application/json",
    "date": "Wed, 23 Apr 2025 22:56:07 GMT",
    "strict-transport-security": "max-age=31536000; includeSubDomains; preload",
    "via": "1.1 google",
    "x-content-type-options": "nosniff",
    "x-frame-options": "DENY",
    "x-request-id": "a976d5df-20e2-4e81-97f6-8d83db7c1862",
    "x-sf-cors": "true"
  }
}



# Información importante
Debe tener al momento de hacer las peticiones:

- Cabeceras de la respuesta:
X-Firefox-Http3: h3
access-control-allow-credentials: true
access-control-allow-headers: idempotency-id,process-id,otp,Correlation-ID,Origin,Accept,X-Requested-With,Content-Type,Access-Control-Request-Method,Access-Control-Request-Headers,Authorization,Cookie,X-Frame-Options,X-Content-Type-Options,Strict-Transport-Security,previewsignature,apikey
access-control-allow-methods: GET,POST,PATCH,HEAD,OPTIONS,DELETE
access-control-allow-origin: 
access-control-max-age: 3628800
alt-svc: h3=":443"; ma=2592000,h3-29=":443"; ma=2592000
content-length: 173
content-type: application/json
date: Fri, 18 Apr 2025 01:39:26 GMT
strict-transport-security: max-age=31536000; includeSubDomains; preload
via: 1.1 google
x-content-type-options: nosniff
x-frame-options: DENY
x-request-id: 5c37884e-af3f-49c7-bb2d-0f4b50784e09
x-sf-cors: true

- Cabeceras de la petición:
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Encoding: gzip, deflate, br, zstd
Accept-Language: es-MX,es;q=0.8,en-US;q=0.5,en;q=0.3
Alt-Used: simulator-api.db.com
Connection: keep-alive
Host: simulator-api.db.com
Priority: u=0, i
Sec-Fetch-Dest: document
Sec-Fetch-Mode: navigate
Sec-Fetch-Site: none
Sec-Fetch-User: ?1
TE: trailers
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:128.0) Gecko/20100101 Firefox/128.0

Quiero que la aplicación registre en logs el contenido de las cabeceras de respuesta.

Quiero que registre el cuerpo completo de la respuesta (response.text) junto con los headers.

Quiero que los logs se agrupen en un archivo de log especial por transferencia.

Aplicarás logs/transferencias/transferencia_<payment_id>.log;
Quiero que esos logs incluyeran también los headers de la petición enviada con OTP.

Deseo que estos archivos se mantengan indefinidamente.

Me gustaría también que en la vista de detalle de cada transferencia haya un enlace para descargar o visualizar el archivo de log asociado

Me gustaría también que si el log no existe (por ejemplo por un error de sistema o eliminación manual), se muestre un mensaje claro de "log no disponible"










Actua como programador en Django, especialista en presentar tu trabajo detallado, completo y ordenado;
revisa si las views y forms esten completas de acuerdo a los requerimientos del archivo dbapi-sepaCreditTransfer.json

1. Vistas
initiate_sepa_transfer
Cumple con los requisitos:

Genera un XML pain.001.001.03 para iniciar una transferencia SEPA.
Usa encabezados requeridos como idempotency-id, otp, y Correlation-Id.
Realiza una solicitud POST a la API de Deutsche Bank para iniciar la transferencia.
Maneja respuestas exitosas (201) y errores (400, 500).
Faltantes o mejoras:

Validación de datos: Aunque se valida el formulario, no se verifica si los datos cumplen con los esquemas definidos en dbapi-sepaCreditTransfer.json (por ejemplo, longitud máxima de campos como creditorName o iban).
Manejo de errores específicos: Actualmente, los errores se manejan de forma genérica. Según el archivo JSON, se deben manejar errores específicos como 401, 404, y 409.
Falta de soporte para photo tan: Aunque se menciona el uso de otp como PUSHTAN, no se incluye lógica para manejar photo tan.
bank_notification
Cumple con los requisitos:

Procesa notificaciones pain.002 del banco.
Actualiza el estado de la transferencia en la base de datos.
Faltantes o mejoras:

Validación del XML recibido: No se valida si el XML cumple con el esquema pain.002.001.03.
Manejo de errores específicos: No se manejan errores como 401 o 404 que podrían surgir al procesar la notificación.
check_transfer_status
Cumple con los requisitos:

Consulta el estado de una transferencia SEPA usando el endpoint /status.
Actualiza el estado de la transferencia en la base de datos.
Faltantes o mejoras:

Validación de la respuesta: No se valida si la respuesta del banco cumple con el esquema definido en dbapi-sepaCreditTransfer.json.
Manejo de errores específicos: No se manejan errores como 404 (transferencia no encontrada en el banco) o 409.
transfer_list
Cumple con los requisitos:

Lista todas las transferencias SEPA almacenadas en la base de datos.
Agrega información adicional como colores de estado para la plantilla.
Faltantes o mejoras:

No hay faltantes evidentes en esta vista, ya que es una funcionalidad interna.
transfer_success
Cumple con los requisitos:

Muestra los detalles de una transferencia exitosa.
Faltantes o mejoras:

No hay faltantes evidentes en esta vista.
2. Formularios
SepaCreditTransferForm
Cumple con los requisitos:

Incluye campos relevantes como debtor, creditor, instructed_amount, y payment_identification.
Usa widgets para mejorar la experiencia del usuario.
Faltantes o mejoras:

Validación de longitud y patrones: Aunque algunos campos tienen validadores (por ejemplo, iban y currency), no todos los campos cumplen con las restricciones definidas en dbapi-sepaCreditTransfer.json. Ejemplo:
creditorName debe tener un máximo de 70 caracteres.
remittanceInformationUnstructured debe tener un máximo de 140 caracteres.
Campos obligatorios: Según el archivo JSON, algunos campos como creditorAccount y debtorAccount son obligatorios, pero no se valida explícitamente en el formulario.

3. Recomendaciones
Para cumplir completamente con los requisitos del archivo dbapi-sepaCreditTransfer.json, se deben realizar las siguientes mejoras:

Vistas
initiate_sepa_transfer:
Validar los datos del formulario contra los esquemas definidos en el archivo JSON.
Manejar errores específicos como 401, 404, y 409.
Agregar soporte para photo tan.

bank_notification:
Validar el XML recibido contra el esquema pain.002.001.03.
Manejar errores específicos como 401 y 404.

check_transfer_status:
Validar la respuesta del banco contra el esquema definido en el archivo JSON.
Manejar errores específicos como 404 y 409.

Formularios
SepaCreditTransferForm:
Agregar validadores para cumplir con las restricciones de longitud y patrones definidos en el archivo JSON.
Asegurarse de que todos los campos obligatorios estén presentes y validados.

4. Ejemplo de Mejoras
Validación de Longitud en el Formulario
class SepaCreditTransferForm(forms.ModelForm):
    class Meta:
        model = SepaCreditTransfer
        exclude = ['payment_id', 'auth_id', 'transaction_status', 'created_at', 'updated_at']
        widgets = {
            'purpose_code': forms.TextInput(attrs={'pattern': '.{4}'}),
            'requested_execution_date': forms.DateInput(attrs={'type': 'date'}),
            'remittance_information_structured': forms.TextInput(attrs={'maxlength': 140}),
            'remittance_information_unstructured': forms.TextInput(attrs={'maxlength': 140}),
            'creditor_name': forms.TextInput(attrs={'maxlength': 70}),
        }
Manejo de Errores Específicos en initiate_sepa_transfer
if response.status_code == 201:
    logger.info(f"Transferencia {transfer.payment_id} enviada exitosamente")
    return render(request, 'api/SCT/transfer_success.html', {'payment_id': transfer.payment_id})
elif response.status_code == 401:
    logger.error("Error de autenticación: Token inválido o expirado")
    return HttpResponseBadRequest("Error de autenticación")
elif response.status_code == 404:
    logger.error("Transferencia no encontrada en el banco")
    return HttpResponseBadRequest("Transferencia no encontrada")
elif response.status_code == 409:
    logger.error("Conflicto: Transferencia ya procesada")
    return HttpResponseBadRequest("Conflicto en la transferencia")
else:
    logger.error(f"Error del banco: {response.text}")
    return HttpResponseBadRequest("Error en la operación bancaria")
Conclusión
Aunque las vistas y formularios actuales cumplen con gran parte de los requisitos, es necesario realizar ajustes para garantizar que se alineen completamente con las especificaciones del archivo dbapi-sepaCreditTransfer.json. Esto incluye validaciones más estrictas, manejo de errores específicos y soporte para todos los casos de uso descritos.
