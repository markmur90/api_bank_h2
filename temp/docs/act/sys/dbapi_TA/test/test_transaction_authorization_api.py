# coding: utf-8

"""
    dbapi-transactionAuthorization

    Accessing sensitive data like ID card information or performing actions such as initiating payments or investment orders need a second factor for authentication (2FA). The Transaction Authorization API lets you easily create proof tokens for 2FA that can be used with other APIs.

    The version of the OpenAPI document: v2
    Contact: bank.api@db.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.api.transaction_authorization_api import TransactionAuthorizationApi


class TestTransactionAuthorizationApi(unittest.TestCase):
    """TransactionAuthorizationApi unit test stubs"""

    def setUp(self) -> None:
        self.api = TransactionAuthorizationApi()

    def tearDown(self) -> None:
        pass

    def test_create_challenge_v2(self) -> None:
        """Test case for create_challenge_v2

        Initiate a challenge request.
        """
        pass

    def test_get_challenge_methods_v2(self) -> None:
        """Test case for get_challenge_methods_v2

        Returns the challenge methods usable for the customer during 2FA.
        """
        pass

    def test_switch_method_v2(self) -> None:
        """Test case for switch_method_v2

        Switch the authorization method
        """
        pass

    def test_verify_challenge_v2(self) -> None:
        """Test case for verify_challenge_v2

        Reply to a challenge request.
        """
        pass

    def test_verify_push_tan_challenge_v2(self) -> None:
        """Test case for verify_push_tan_challenge_v2

        Verify a PushTAN challenge request.
        """
        pass


if __name__ == '__main__':
    unittest.main()
