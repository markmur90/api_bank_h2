from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util

from openapi_server.models.address import Address  # noqa: E501

class Creditor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creditor_name=None, creditor_postal_address=None):  # noqa: E501
        """Creditor - a model defined in OpenAPI

        :param creditor_name: The creditor_name of this Creditor.  # noqa: E501
        :type creditor_name: str
        :param creditor_postal_address: The creditor_postal_address of this Creditor.  # noqa: E501
        :type creditor_postal_address: Address
        """
        self.openapi_types = {
            'creditor_name': str,
            'creditor_postal_address': Address
        }

        self.attribute_map = {
            'creditor_name': 'creditorName',
            'creditor_postal_address': 'creditorPostalAddress'
        }

        self._creditor_name = creditor_name
        self._creditor_postal_address = creditor_postal_address

    @classmethod
    def from_dict(cls, dikt) -> 'Creditor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Creditor of this Creditor.  # noqa: E501
        :rtype: Creditor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creditor_name(self) -> str:
        """Gets the creditor_name of this Creditor.

        Name by which a party is known and which is usually used to identify that party  # noqa: E501

        :return: The creditor_name of this Creditor.
        :rtype: str
        """
        return self._creditor_name

    @creditor_name.setter
    def creditor_name(self, creditor_name: str):
        """Sets the creditor_name of this Creditor.

        Name by which a party is known and which is usually used to identify that party  # noqa: E501

        :param creditor_name: The creditor_name of this Creditor.
        :type creditor_name: str
        """
        if creditor_name is None:
            raise ValueError("Invalid value for `creditor_name`, must not be `None`")  # noqa: E501
        if creditor_name is not None and len(creditor_name) > 70:
            raise ValueError("Invalid value for `creditor_name`, length must be less than or equal to `70`")  # noqa: E501

        self._creditor_name = creditor_name

    @property
    def creditor_postal_address(self) -> Address:
        """Gets the creditor_postal_address of this Creditor.


        :return: The creditor_postal_address of this Creditor.
        :rtype: Address
        """
        return self._creditor_postal_address

    @creditor_postal_address.setter
    def creditor_postal_address(self, creditor_postal_address: Address):
        """Sets the creditor_postal_address of this Creditor.


        :param creditor_postal_address: The creditor_postal_address of this Creditor.
        :type creditor_postal_address: Address
        """

        self._creditor_postal_address = creditor_postal_address
