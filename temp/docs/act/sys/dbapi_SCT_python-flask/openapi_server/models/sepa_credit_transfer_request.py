from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.creditor import Creditor
from openapi_server.models.creditor_account import CreditorAccount
from openapi_server.models.creditor_agent import CreditorAgent
from openapi_server.models.debtor import Debtor
from openapi_server.models.debtor_account import DebtorAccount
from openapi_server.models.instructed_amount import InstructedAmount
from openapi_server.models.payment_identification import PaymentIdentification
from openapi_server import util

from openapi_server.models.creditor import Creditor  # noqa: E501
from openapi_server.models.creditor_account import CreditorAccount  # noqa: E501
from openapi_server.models.creditor_agent import CreditorAgent  # noqa: E501
from openapi_server.models.debtor import Debtor  # noqa: E501
from openapi_server.models.debtor_account import DebtorAccount  # noqa: E501
from openapi_server.models.instructed_amount import InstructedAmount  # noqa: E501
from openapi_server.models.payment_identification import PaymentIdentification  # noqa: E501

class SepaCreditTransferRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, purpose_code=None, requested_execution_date=None, debtor=None, debtor_account=None, payment_identification=None, instructed_amount=None, creditor_agent=None, creditor=None, creditor_account=None, remittance_information_structured=None, remittance_information_unstructured=None):  # noqa: E501
        """SepaCreditTransferRequest - a model defined in OpenAPI

        :param purpose_code: The purpose_code of this SepaCreditTransferRequest.  # noqa: E501
        :type purpose_code: str
        :param requested_execution_date: The requested_execution_date of this SepaCreditTransferRequest.  # noqa: E501
        :type requested_execution_date: date
        :param debtor: The debtor of this SepaCreditTransferRequest.  # noqa: E501
        :type debtor: Debtor
        :param debtor_account: The debtor_account of this SepaCreditTransferRequest.  # noqa: E501
        :type debtor_account: DebtorAccount
        :param payment_identification: The payment_identification of this SepaCreditTransferRequest.  # noqa: E501
        :type payment_identification: PaymentIdentification
        :param instructed_amount: The instructed_amount of this SepaCreditTransferRequest.  # noqa: E501
        :type instructed_amount: InstructedAmount
        :param creditor_agent: The creditor_agent of this SepaCreditTransferRequest.  # noqa: E501
        :type creditor_agent: CreditorAgent
        :param creditor: The creditor of this SepaCreditTransferRequest.  # noqa: E501
        :type creditor: Creditor
        :param creditor_account: The creditor_account of this SepaCreditTransferRequest.  # noqa: E501
        :type creditor_account: CreditorAccount
        :param remittance_information_structured: The remittance_information_structured of this SepaCreditTransferRequest.  # noqa: E501
        :type remittance_information_structured: str
        :param remittance_information_unstructured: The remittance_information_unstructured of this SepaCreditTransferRequest.  # noqa: E501
        :type remittance_information_unstructured: str
        """
        self.openapi_types = {
            'purpose_code': str,
            'requested_execution_date': date,
            'debtor': Debtor,
            'debtor_account': DebtorAccount,
            'payment_identification': PaymentIdentification,
            'instructed_amount': InstructedAmount,
            'creditor_agent': CreditorAgent,
            'creditor': Creditor,
            'creditor_account': CreditorAccount,
            'remittance_information_structured': str,
            'remittance_information_unstructured': str
        }

        self.attribute_map = {
            'purpose_code': 'purposeCode',
            'requested_execution_date': 'requestedExecutionDate',
            'debtor': 'debtor',
            'debtor_account': 'debtorAccount',
            'payment_identification': 'paymentIdentification',
            'instructed_amount': 'instructedAmount',
            'creditor_agent': 'creditorAgent',
            'creditor': 'creditor',
            'creditor_account': 'creditorAccount',
            'remittance_information_structured': 'remittanceInformationStructured',
            'remittance_information_unstructured': 'remittanceInformationUnstructured'
        }

        self._purpose_code = purpose_code
        self._requested_execution_date = requested_execution_date
        self._debtor = debtor
        self._debtor_account = debtor_account
        self._payment_identification = payment_identification
        self._instructed_amount = instructed_amount
        self._creditor_agent = creditor_agent
        self._creditor = creditor
        self._creditor_account = creditor_account
        self._remittance_information_structured = remittance_information_structured
        self._remittance_information_unstructured = remittance_information_unstructured

    @classmethod
    def from_dict(cls, dikt) -> 'SepaCreditTransferRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SepaCreditTransferRequest of this SepaCreditTransferRequest.  # noqa: E501
        :rtype: SepaCreditTransferRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def purpose_code(self) -> str:
        """Gets the purpose_code of this SepaCreditTransferRequest.

        ExternalPurpose1Code  # noqa: E501

        :return: The purpose_code of this SepaCreditTransferRequest.
        :rtype: str
        """
        return self._purpose_code

    @purpose_code.setter
    def purpose_code(self, purpose_code: str):
        """Sets the purpose_code of this SepaCreditTransferRequest.

        ExternalPurpose1Code  # noqa: E501

        :param purpose_code: The purpose_code of this SepaCreditTransferRequest.
        :type purpose_code: str
        """
        if purpose_code is not None and len(purpose_code) > 4:
            raise ValueError("Invalid value for `purpose_code`, length must be less than or equal to `4`")  # noqa: E501
        if purpose_code is not None and len(purpose_code) < 4:
            raise ValueError("Invalid value for `purpose_code`, length must be greater than or equal to `4`")  # noqa: E501

        self._purpose_code = purpose_code

    @property
    def requested_execution_date(self) -> date:
        """Gets the requested_execution_date of this SepaCreditTransferRequest.

        must match yyyy-MM-dd format, also in CET timezone.  # noqa: E501

        :return: The requested_execution_date of this SepaCreditTransferRequest.
        :rtype: date
        """
        return self._requested_execution_date

    @requested_execution_date.setter
    def requested_execution_date(self, requested_execution_date: date):
        """Sets the requested_execution_date of this SepaCreditTransferRequest.

        must match yyyy-MM-dd format, also in CET timezone.  # noqa: E501

        :param requested_execution_date: The requested_execution_date of this SepaCreditTransferRequest.
        :type requested_execution_date: date
        """

        self._requested_execution_date = requested_execution_date

    @property
    def debtor(self) -> Debtor:
        """Gets the debtor of this SepaCreditTransferRequest.


        :return: The debtor of this SepaCreditTransferRequest.
        :rtype: Debtor
        """
        return self._debtor

    @debtor.setter
    def debtor(self, debtor: Debtor):
        """Sets the debtor of this SepaCreditTransferRequest.


        :param debtor: The debtor of this SepaCreditTransferRequest.
        :type debtor: Debtor
        """
        if debtor is None:
            raise ValueError("Invalid value for `debtor`, must not be `None`")  # noqa: E501

        self._debtor = debtor

    @property
    def debtor_account(self) -> DebtorAccount:
        """Gets the debtor_account of this SepaCreditTransferRequest.


        :return: The debtor_account of this SepaCreditTransferRequest.
        :rtype: DebtorAccount
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account: DebtorAccount):
        """Sets the debtor_account of this SepaCreditTransferRequest.


        :param debtor_account: The debtor_account of this SepaCreditTransferRequest.
        :type debtor_account: DebtorAccount
        """
        if debtor_account is None:
            raise ValueError("Invalid value for `debtor_account`, must not be `None`")  # noqa: E501

        self._debtor_account = debtor_account

    @property
    def payment_identification(self) -> PaymentIdentification:
        """Gets the payment_identification of this SepaCreditTransferRequest.


        :return: The payment_identification of this SepaCreditTransferRequest.
        :rtype: PaymentIdentification
        """
        return self._payment_identification

    @payment_identification.setter
    def payment_identification(self, payment_identification: PaymentIdentification):
        """Sets the payment_identification of this SepaCreditTransferRequest.


        :param payment_identification: The payment_identification of this SepaCreditTransferRequest.
        :type payment_identification: PaymentIdentification
        """

        self._payment_identification = payment_identification

    @property
    def instructed_amount(self) -> InstructedAmount:
        """Gets the instructed_amount of this SepaCreditTransferRequest.


        :return: The instructed_amount of this SepaCreditTransferRequest.
        :rtype: InstructedAmount
        """
        return self._instructed_amount

    @instructed_amount.setter
    def instructed_amount(self, instructed_amount: InstructedAmount):
        """Sets the instructed_amount of this SepaCreditTransferRequest.


        :param instructed_amount: The instructed_amount of this SepaCreditTransferRequest.
        :type instructed_amount: InstructedAmount
        """
        if instructed_amount is None:
            raise ValueError("Invalid value for `instructed_amount`, must not be `None`")  # noqa: E501

        self._instructed_amount = instructed_amount

    @property
    def creditor_agent(self) -> CreditorAgent:
        """Gets the creditor_agent of this SepaCreditTransferRequest.


        :return: The creditor_agent of this SepaCreditTransferRequest.
        :rtype: CreditorAgent
        """
        return self._creditor_agent

    @creditor_agent.setter
    def creditor_agent(self, creditor_agent: CreditorAgent):
        """Sets the creditor_agent of this SepaCreditTransferRequest.


        :param creditor_agent: The creditor_agent of this SepaCreditTransferRequest.
        :type creditor_agent: CreditorAgent
        """
        if creditor_agent is None:
            raise ValueError("Invalid value for `creditor_agent`, must not be `None`")  # noqa: E501

        self._creditor_agent = creditor_agent

    @property
    def creditor(self) -> Creditor:
        """Gets the creditor of this SepaCreditTransferRequest.


        :return: The creditor of this SepaCreditTransferRequest.
        :rtype: Creditor
        """
        return self._creditor

    @creditor.setter
    def creditor(self, creditor: Creditor):
        """Sets the creditor of this SepaCreditTransferRequest.


        :param creditor: The creditor of this SepaCreditTransferRequest.
        :type creditor: Creditor
        """
        if creditor is None:
            raise ValueError("Invalid value for `creditor`, must not be `None`")  # noqa: E501

        self._creditor = creditor

    @property
    def creditor_account(self) -> CreditorAccount:
        """Gets the creditor_account of this SepaCreditTransferRequest.


        :return: The creditor_account of this SepaCreditTransferRequest.
        :rtype: CreditorAccount
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account: CreditorAccount):
        """Sets the creditor_account of this SepaCreditTransferRequest.


        :param creditor_account: The creditor_account of this SepaCreditTransferRequest.
        :type creditor_account: CreditorAccount
        """
        if creditor_account is None:
            raise ValueError("Invalid value for `creditor_account`, must not be `None`")  # noqa: E501

        self._creditor_account = creditor_account

    @property
    def remittance_information_structured(self) -> str:
        """Gets the remittance_information_structured of this SepaCreditTransferRequest.

        recommended to be used in each transaction ; contract related - references to the business; it depends on the client what they want to include  # noqa: E501

        :return: The remittance_information_structured of this SepaCreditTransferRequest.
        :rtype: str
        """
        return self._remittance_information_structured

    @remittance_information_structured.setter
    def remittance_information_structured(self, remittance_information_structured: str):
        """Sets the remittance_information_structured of this SepaCreditTransferRequest.

        recommended to be used in each transaction ; contract related - references to the business; it depends on the client what they want to include  # noqa: E501

        :param remittance_information_structured: The remittance_information_structured of this SepaCreditTransferRequest.
        :type remittance_information_structured: str
        """
        if remittance_information_structured is not None and len(remittance_information_structured) > 140:
            raise ValueError("Invalid value for `remittance_information_structured`, length must be less than or equal to `140`")  # noqa: E501

        self._remittance_information_structured = remittance_information_structured

    @property
    def remittance_information_unstructured(self) -> str:
        """Gets the remittance_information_unstructured of this SepaCreditTransferRequest.

        recommended to be used in each transaction ; contract related : references to the business; it depends on the client what they want to include  # noqa: E501

        :return: The remittance_information_unstructured of this SepaCreditTransferRequest.
        :rtype: str
        """
        return self._remittance_information_unstructured

    @remittance_information_unstructured.setter
    def remittance_information_unstructured(self, remittance_information_unstructured: str):
        """Sets the remittance_information_unstructured of this SepaCreditTransferRequest.

        recommended to be used in each transaction ; contract related : references to the business; it depends on the client what they want to include  # noqa: E501

        :param remittance_information_unstructured: The remittance_information_unstructured of this SepaCreditTransferRequest.
        :type remittance_information_unstructured: str
        """
        if remittance_information_unstructured is not None and len(remittance_information_unstructured) > 140:
            raise ValueError("Invalid value for `remittance_information_unstructured`, length must be less than or equal to `140`")  # noqa: E501

        self._remittance_information_unstructured = remittance_information_unstructured
