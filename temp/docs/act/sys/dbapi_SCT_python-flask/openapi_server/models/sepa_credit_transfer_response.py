from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.transaction_status import TransactionStatus
from openapi_server import util

from openapi_server.models.transaction_status import TransactionStatus  # noqa: E501

class SepaCreditTransferResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transaction_status=None, payment_id=None, auth_id=None):  # noqa: E501
        """SepaCreditTransferResponse - a model defined in OpenAPI

        :param transaction_status: The transaction_status of this SepaCreditTransferResponse.  # noqa: E501
        :type transaction_status: TransactionStatus
        :param payment_id: The payment_id of this SepaCreditTransferResponse.  # noqa: E501
        :type payment_id: str
        :param auth_id: The auth_id of this SepaCreditTransferResponse.  # noqa: E501
        :type auth_id: str
        """
        self.openapi_types = {
            'transaction_status': TransactionStatus,
            'payment_id': str,
            'auth_id': str
        }

        self.attribute_map = {
            'transaction_status': 'transactionStatus',
            'payment_id': 'paymentId',
            'auth_id': 'authId'
        }

        self._transaction_status = transaction_status
        self._payment_id = payment_id
        self._auth_id = auth_id

    @classmethod
    def from_dict(cls, dikt) -> 'SepaCreditTransferResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SepaCreditTransferResponse of this SepaCreditTransferResponse.  # noqa: E501
        :rtype: SepaCreditTransferResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transaction_status(self) -> TransactionStatus:
        """Gets the transaction_status of this SepaCreditTransferResponse.


        :return: The transaction_status of this SepaCreditTransferResponse.
        :rtype: TransactionStatus
        """
        return self._transaction_status

    @transaction_status.setter
    def transaction_status(self, transaction_status: TransactionStatus):
        """Sets the transaction_status of this SepaCreditTransferResponse.


        :param transaction_status: The transaction_status of this SepaCreditTransferResponse.
        :type transaction_status: TransactionStatus
        """
        if transaction_status is None:
            raise ValueError("Invalid value for `transaction_status`, must not be `None`")  # noqa: E501

        self._transaction_status = transaction_status

    @property
    def payment_id(self) -> str:
        """Gets the payment_id of this SepaCreditTransferResponse.

        resource identification of the generated paymentinitiation resource ('Transaction-ID' from the header which is populated with the Intra Bank ID); should be available at least when status is PDNG or ACCP  # noqa: E501

        :return: The payment_id of this SepaCreditTransferResponse.
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id: str):
        """Sets the payment_id of this SepaCreditTransferResponse.

        resource identification of the generated paymentinitiation resource ('Transaction-ID' from the header which is populated with the Intra Bank ID); should be available at least when status is PDNG or ACCP  # noqa: E501

        :param payment_id: The payment_id of this SepaCreditTransferResponse.
        :type payment_id: str
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")  # noqa: E501

        self._payment_id = payment_id

    @property
    def auth_id(self) -> str:
        """Gets the auth_id of this SepaCreditTransferResponse.

        Authentication Id used for update SCA status SEPA payment, It will be valid for 5 minutes.  # noqa: E501

        :return: The auth_id of this SepaCreditTransferResponse.
        :rtype: str
        """
        return self._auth_id

    @auth_id.setter
    def auth_id(self, auth_id: str):
        """Sets the auth_id of this SepaCreditTransferResponse.

        Authentication Id used for update SCA status SEPA payment, It will be valid for 5 minutes.  # noqa: E501

        :param auth_id: The auth_id of this SepaCreditTransferResponse.
        :type auth_id: str
        """
        if auth_id is None:
            raise ValueError("Invalid value for `auth_id`, must not be `None`")  # noqa: E501

        self._auth_id = auth_id
