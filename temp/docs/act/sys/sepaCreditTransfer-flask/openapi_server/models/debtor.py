from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util

from openapi_server.models.address import Address  # noqa: E501

class Debtor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, debtor_name=None, debtor_postal_address=None):  # noqa: E501
        """Debtor - a model defined in OpenAPI

        :param debtor_name: The debtor_name of this Debtor.  # noqa: E501
        :type debtor_name: str
        :param debtor_postal_address: The debtor_postal_address of this Debtor.  # noqa: E501
        :type debtor_postal_address: Address
        """
        self.openapi_types = {
            'debtor_name': str,
            'debtor_postal_address': Address
        }

        self.attribute_map = {
            'debtor_name': 'debtorName',
            'debtor_postal_address': 'debtorPostalAddress'
        }

        self._debtor_name = debtor_name
        self._debtor_postal_address = debtor_postal_address

    @classmethod
    def from_dict(cls, dikt) -> 'Debtor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Debtor of this Debtor.  # noqa: E501
        :rtype: Debtor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def debtor_name(self) -> str:
        """Gets the debtor_name of this Debtor.


        :return: The debtor_name of this Debtor.
        :rtype: str
        """
        return self._debtor_name

    @debtor_name.setter
    def debtor_name(self, debtor_name: str):
        """Sets the debtor_name of this Debtor.


        :param debtor_name: The debtor_name of this Debtor.
        :type debtor_name: str
        """
        if debtor_name is None:
            raise ValueError("Invalid value for `debtor_name`, must not be `None`")  # noqa: E501
        if debtor_name is not None and len(debtor_name) > 140:
            raise ValueError("Invalid value for `debtor_name`, length must be less than or equal to `140`")  # noqa: E501

        self._debtor_name = debtor_name

    @property
    def debtor_postal_address(self) -> Address:
        """Gets the debtor_postal_address of this Debtor.


        :return: The debtor_postal_address of this Debtor.
        :rtype: Address
        """
        return self._debtor_postal_address

    @debtor_postal_address.setter
    def debtor_postal_address(self, debtor_postal_address: Address):
        """Sets the debtor_postal_address of this Debtor.


        :param debtor_postal_address: The debtor_postal_address of this Debtor.
        :type debtor_postal_address: Address
        """

        self._debtor_postal_address = debtor_postal_address
