from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.address_line import AddressLine
from openapi_server import util

from openapi_server.models.address_line import AddressLine  # noqa: E501

class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country=None, address_line=None):  # noqa: E501
        """Address - a model defined in OpenAPI

        :param country: The country of this Address.  # noqa: E501
        :type country: str
        :param address_line: The address_line of this Address.  # noqa: E501
        :type address_line: AddressLine
        """
        self.openapi_types = {
            'country': str,
            'address_line': AddressLine
        }

        self.attribute_map = {
            'country': 'country',
            'address_line': 'addressLine'
        }

        self._country = country
        self._address_line = address_line

    @classmethod
    def from_dict(cls, dikt) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Address of this Address.  # noqa: E501
        :rtype: Address
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self) -> str:
        """Gets the country of this Address.

        ISO 3166-1 alpha-2 country code  # noqa: E501

        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this Address.

        ISO 3166-1 alpha-2 country code  # noqa: E501

        :param country: The country of this Address.
        :type country: str
        """
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")  # noqa: E501
        if country is not None and len(country) < 2:
            raise ValueError("Invalid value for `country`, length must be greater than or equal to `2`")  # noqa: E501

        self._country = country

    @property
    def address_line(self) -> AddressLine:
        """Gets the address_line of this Address.


        :return: The address_line of this Address.
        :rtype: AddressLine
        """
        return self._address_line

    @address_line.setter
    def address_line(self, address_line: AddressLine):
        """Sets the address_line of this Address.


        :param address_line: The address_line of this Address.
        :type address_line: AddressLine
        """

        self._address_line = address_line
