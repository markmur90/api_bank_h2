from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class AddressLine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, street_and_house_number=None, zip_code_and_city=None):  # noqa: E501
        """AddressLine - a model defined in OpenAPI

        :param street_and_house_number: The street_and_house_number of this AddressLine.  # noqa: E501
        :type street_and_house_number: str
        :param zip_code_and_city: The zip_code_and_city of this AddressLine.  # noqa: E501
        :type zip_code_and_city: str
        """
        self.openapi_types = {
            'street_and_house_number': str,
            'zip_code_and_city': str
        }

        self.attribute_map = {
            'street_and_house_number': 'streetAndHouseNumber',
            'zip_code_and_city': 'zipCodeAndCity'
        }

        self._street_and_house_number = street_and_house_number
        self._zip_code_and_city = zip_code_and_city

    @classmethod
    def from_dict(cls, dikt) -> 'AddressLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AddressLine of this AddressLine.  # noqa: E501
        :rtype: AddressLine
        """
        return util.deserialize_model(dikt, cls)

    @property
    def street_and_house_number(self) -> str:
        """Gets the street_and_house_number of this AddressLine.

        Street name and house number  # noqa: E501

        :return: The street_and_house_number of this AddressLine.
        :rtype: str
        """
        return self._street_and_house_number

    @street_and_house_number.setter
    def street_and_house_number(self, street_and_house_number: str):
        """Sets the street_and_house_number of this AddressLine.

        Street name and house number  # noqa: E501

        :param street_and_house_number: The street_and_house_number of this AddressLine.
        :type street_and_house_number: str
        """
        if street_and_house_number is not None and len(street_and_house_number) > 70:
            raise ValueError("Invalid value for `street_and_house_number`, length must be less than or equal to `70`")  # noqa: E501

        self._street_and_house_number = street_and_house_number

    @property
    def zip_code_and_city(self) -> str:
        """Gets the zip_code_and_city of this AddressLine.

        Zip code and city name  # noqa: E501

        :return: The zip_code_and_city of this AddressLine.
        :rtype: str
        """
        return self._zip_code_and_city

    @zip_code_and_city.setter
    def zip_code_and_city(self, zip_code_and_city: str):
        """Sets the zip_code_and_city of this AddressLine.

        Zip code and city name  # noqa: E501

        :param zip_code_and_city: The zip_code_and_city of this AddressLine.
        :type zip_code_and_city: str
        """
        if zip_code_and_city is not None and len(zip_code_and_city) > 70:
            raise ValueError("Invalid value for `zip_code_and_city`, length must be less than or equal to `70`")  # noqa: E501

        self._zip_code_and_city = zip_code_and_city
