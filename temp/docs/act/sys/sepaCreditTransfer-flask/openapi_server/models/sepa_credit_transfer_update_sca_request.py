from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.action import Action
from openapi_server import util

from openapi_server.models.action import Action  # noqa: E501

class SepaCreditTransferUpdateScaRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action=None, auth_id=None):  # noqa: E501
        """SepaCreditTransferUpdateScaRequest - a model defined in OpenAPI

        :param action: The action of this SepaCreditTransferUpdateScaRequest.  # noqa: E501
        :type action: Action
        :param auth_id: The auth_id of this SepaCreditTransferUpdateScaRequest.  # noqa: E501
        :type auth_id: str
        """
        self.openapi_types = {
            'action': Action,
            'auth_id': str
        }

        self.attribute_map = {
            'action': 'action',
            'auth_id': 'authId'
        }

        self._action = action
        self._auth_id = auth_id

    @classmethod
    def from_dict(cls, dikt) -> 'SepaCreditTransferUpdateScaRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SepaCreditTransferUpdateScaRequest of this SepaCreditTransferUpdateScaRequest.  # noqa: E501
        :rtype: SepaCreditTransferUpdateScaRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self) -> Action:
        """Gets the action of this SepaCreditTransferUpdateScaRequest.


        :return: The action of this SepaCreditTransferUpdateScaRequest.
        :rtype: Action
        """
        return self._action

    @action.setter
    def action(self, action: Action):
        """Sets the action of this SepaCreditTransferUpdateScaRequest.


        :param action: The action of this SepaCreditTransferUpdateScaRequest.
        :type action: Action
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501

        self._action = action

    @property
    def auth_id(self) -> str:
        """Gets the auth_id of this SepaCreditTransferUpdateScaRequest.

        Authentication Id used for update SCA status SEPA payment, It will be valid for 5 minutes.  # noqa: E501

        :return: The auth_id of this SepaCreditTransferUpdateScaRequest.
        :rtype: str
        """
        return self._auth_id

    @auth_id.setter
    def auth_id(self, auth_id: str):
        """Sets the auth_id of this SepaCreditTransferUpdateScaRequest.

        Authentication Id used for update SCA status SEPA payment, It will be valid for 5 minutes.  # noqa: E501

        :param auth_id: The auth_id of this SepaCreditTransferUpdateScaRequest.
        :type auth_id: str
        """
        if auth_id is None:
            raise ValueError("Invalid value for `auth_id`, must not be `None`")  # noqa: E501

        self._auth_id = auth_id
