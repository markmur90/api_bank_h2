# coding: utf-8

"""
    dbapi-transactionAuthorization

    Accessing sensitive data like ID card information or performing actions such as initiating payments or investment orders need a second factor for authentication (2FA). The Transaction Authorization API lets you easily create proof tokens for 2FA that can be used with other APIs.

    The version of the OpenAPI document: v2
    Contact: bank.api@db.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ChallengeRequestDataInstantSepaCreditTransfers(BaseModel):
    """
    challenge request data for requestType INSTANT_SEPA_CREDIT_TRANSFERS
    """ # noqa: E501
    type: StrictStr
    target_iban: Annotated[str, Field(strict=True)] = Field(description="The IBAN of this account.", alias="targetIban")
    amount_currency: Annotated[str, Field(strict=True)] = Field(description="ISO 4217 Alpha 3 currency code.", alias="amountCurrency")
    amount_value: Union[StrictFloat, StrictInt] = Field(description="value of the money transfer in given currency", alias="amountValue")
    __properties: ClassVar[List[str]] = ["type", "targetIban", "amountCurrency", "amountValue"]

    @field_validator('target_iban')
    def target_iban_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}", value):
            raise ValueError(r"must validate the regular expression /[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}/")
        return value

    @field_validator('amount_currency')
    def amount_currency_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"[A-Z]{3}", value):
            raise ValueError(r"must validate the regular expression /[A-Z]{3}/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChallengeRequestDataInstantSepaCreditTransfers from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChallengeRequestDataInstantSepaCreditTransfers from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type") if obj.get("type") is not None else 'challengeRequestDataInstantSepaCreditTransfers',
            "targetIban": obj.get("targetIban"),
            "amountCurrency": obj.get("amountCurrency"),
            "amountValue": obj.get("amountValue")
        })
        return _obj


