# coding: utf-8

"""
    dbapi-sepaCreditTransfer

    Easily initiate SEPA credit transfer then if required cancel or get the status and get the details afterwards.

    The version of the OpenAPI document: v1
    Contact: bank.api@db.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr
from typing import Optional
from typing_extensions import Annotated
from openapi_client.models.sepa_credit_transfer_request import SepaCreditTransferRequest
from openapi_client.models.sepa_credit_transfer_response import SepaCreditTransferResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class CreateSEPACreditTransferApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def root_post(
        self,
        idempotency_id: Annotated[StrictStr, Field(description="Unique id of the service call. Must be present during retries to avoid multiple processing of the same request")],
        otp: Annotated[StrictStr, Field(description="One time password required for SCT creation, you can use photo tan or push tan. In case of push tan pass otp as 'PUSHTAN'. in case of photo tan please generate otp by using transaction authorisation APIs. there you must use requestType as 'SEPA_TRANSFER_GRANT'.")],
        sepa_credit_transfer_request: SepaCreditTransferRequest,
        correlation_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=50)]], Field(description="Free form key controlled by the caller e.g. uuid")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> SepaCreditTransferResponse:
        """Initiates a SEPA Credit Transfer

        This API is for creating a Sepa Credit Transfer

        :param idempotency_id: Unique id of the service call. Must be present during retries to avoid multiple processing of the same request (required)
        :type idempotency_id: str
        :param otp: One time password required for SCT creation, you can use photo tan or push tan. In case of push tan pass otp as 'PUSHTAN'. in case of photo tan please generate otp by using transaction authorisation APIs. there you must use requestType as 'SEPA_TRANSFER_GRANT'. (required)
        :type otp: str
        :param sepa_credit_transfer_request: (required)
        :type sepa_credit_transfer_request: SepaCreditTransferRequest
        :param correlation_id: Free form key controlled by the caller e.g. uuid
        :type correlation_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._root_post_serialize(
            idempotency_id=idempotency_id,
            otp=otp,
            sepa_credit_transfer_request=sepa_credit_transfer_request,
            correlation_id=correlation_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SepaCreditTransferResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def root_post_with_http_info(
        self,
        idempotency_id: Annotated[StrictStr, Field(description="Unique id of the service call. Must be present during retries to avoid multiple processing of the same request")],
        otp: Annotated[StrictStr, Field(description="One time password required for SCT creation, you can use photo tan or push tan. In case of push tan pass otp as 'PUSHTAN'. in case of photo tan please generate otp by using transaction authorisation APIs. there you must use requestType as 'SEPA_TRANSFER_GRANT'.")],
        sepa_credit_transfer_request: SepaCreditTransferRequest,
        correlation_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=50)]], Field(description="Free form key controlled by the caller e.g. uuid")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[SepaCreditTransferResponse]:
        """Initiates a SEPA Credit Transfer

        This API is for creating a Sepa Credit Transfer

        :param idempotency_id: Unique id of the service call. Must be present during retries to avoid multiple processing of the same request (required)
        :type idempotency_id: str
        :param otp: One time password required for SCT creation, you can use photo tan or push tan. In case of push tan pass otp as 'PUSHTAN'. in case of photo tan please generate otp by using transaction authorisation APIs. there you must use requestType as 'SEPA_TRANSFER_GRANT'. (required)
        :type otp: str
        :param sepa_credit_transfer_request: (required)
        :type sepa_credit_transfer_request: SepaCreditTransferRequest
        :param correlation_id: Free form key controlled by the caller e.g. uuid
        :type correlation_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._root_post_serialize(
            idempotency_id=idempotency_id,
            otp=otp,
            sepa_credit_transfer_request=sepa_credit_transfer_request,
            correlation_id=correlation_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SepaCreditTransferResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def root_post_without_preload_content(
        self,
        idempotency_id: Annotated[StrictStr, Field(description="Unique id of the service call. Must be present during retries to avoid multiple processing of the same request")],
        otp: Annotated[StrictStr, Field(description="One time password required for SCT creation, you can use photo tan or push tan. In case of push tan pass otp as 'PUSHTAN'. in case of photo tan please generate otp by using transaction authorisation APIs. there you must use requestType as 'SEPA_TRANSFER_GRANT'.")],
        sepa_credit_transfer_request: SepaCreditTransferRequest,
        correlation_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=50)]], Field(description="Free form key controlled by the caller e.g. uuid")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Initiates a SEPA Credit Transfer

        This API is for creating a Sepa Credit Transfer

        :param idempotency_id: Unique id of the service call. Must be present during retries to avoid multiple processing of the same request (required)
        :type idempotency_id: str
        :param otp: One time password required for SCT creation, you can use photo tan or push tan. In case of push tan pass otp as 'PUSHTAN'. in case of photo tan please generate otp by using transaction authorisation APIs. there you must use requestType as 'SEPA_TRANSFER_GRANT'. (required)
        :type otp: str
        :param sepa_credit_transfer_request: (required)
        :type sepa_credit_transfer_request: SepaCreditTransferRequest
        :param correlation_id: Free form key controlled by the caller e.g. uuid
        :type correlation_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._root_post_serialize(
            idempotency_id=idempotency_id,
            otp=otp,
            sepa_credit_transfer_request=sepa_credit_transfer_request,
            correlation_id=correlation_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "SepaCreditTransferResponse",
            '400': "ErrorResponse",
            '401': "ErrorResponse",
            '404': "ErrorResponse",
            '409': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _root_post_serialize(
        self,
        idempotency_id,
        otp,
        sepa_credit_transfer_request,
        correlation_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if idempotency_id is not None:
            _header_params['idempotency-id'] = idempotency_id
        if otp is not None:
            _header_params['otp'] = otp
        if correlation_id is not None:
            _header_params['Correlation-Id'] = correlation_id
        # process the form parameters
        # process the body parameter
        if sepa_credit_transfer_request is not None:
            _body_params = sepa_credit_transfer_request


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'application/json'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_db_smart_access', 
            'api_auth_code', 
            'api_implicit'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


