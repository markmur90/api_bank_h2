# coding: utf-8

"""
    dbapi-processingOrders

    Create a document processing order. Limited access for special consumers only.

    The version of the OpenAPI document: v2
    Contact: bank.api@db.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBytes, StrictStr
from typing import Optional, Tuple, Union
from typing_extensions import Annotated
from openapi_client.models.upload_document_response import UploadDocumentResponse

from openapi_client.api_client import ApiClient, RequestSerialized
from openapi_client.api_response import ApiResponse
from openapi_client.rest import RESTResponseType


class ProcessingOrdersApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def create_processing_orders(
        self,
        idempotency_id: Annotated[StrictStr, Field(description="Unique id of the service call. Should be resent during retries to avoid multiple processing of the same request")],
        processing_order: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="The metadata of this processing order and their belonging documents. Must be a content-type application/json and schema #/definitions/ProcessingOrderMetadata. It must be the leading part of the multipart request payload followed by the individual documents as referenced in the metadata.")],
        correlation_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=50)]], Field(description="Free form key controlled by the caller e.g. uuid")] = None,
        document_data: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="The document data itself. You can send multiple documents with different multipart/form-data names; valid content types are: application/pdf, image/tiff or application/xml. The number of documents must match the number of document metadata provided in JSON for multipart/form-data processingOrder.documentMetas")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> None:
        """Create a processing order

        Create a processing order. This endpoint has limited access for special consumers only. It's possible to start manual processes only.

        :param idempotency_id: Unique id of the service call. Should be resent during retries to avoid multiple processing of the same request (required)
        :type idempotency_id: str
        :param processing_order: The metadata of this processing order and their belonging documents. Must be a content-type application/json and schema #/definitions/ProcessingOrderMetadata. It must be the leading part of the multipart request payload followed by the individual documents as referenced in the metadata. (required)
        :type processing_order: bytearray
        :param correlation_id: Free form key controlled by the caller e.g. uuid
        :type correlation_id: str
        :param document_data: The document data itself. You can send multiple documents with different multipart/form-data names; valid content types are: application/pdf, image/tiff or application/xml. The number of documents must match the number of document metadata provided in JSON for multipart/form-data processingOrder.documentMetas
        :type document_data: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_processing_orders_serialize(
            idempotency_id=idempotency_id,
            processing_order=processing_order,
            correlation_id=correlation_id,
            document_data=document_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def create_processing_orders_with_http_info(
        self,
        idempotency_id: Annotated[StrictStr, Field(description="Unique id of the service call. Should be resent during retries to avoid multiple processing of the same request")],
        processing_order: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="The metadata of this processing order and their belonging documents. Must be a content-type application/json and schema #/definitions/ProcessingOrderMetadata. It must be the leading part of the multipart request payload followed by the individual documents as referenced in the metadata.")],
        correlation_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=50)]], Field(description="Free form key controlled by the caller e.g. uuid")] = None,
        document_data: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="The document data itself. You can send multiple documents with different multipart/form-data names; valid content types are: application/pdf, image/tiff or application/xml. The number of documents must match the number of document metadata provided in JSON for multipart/form-data processingOrder.documentMetas")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[None]:
        """Create a processing order

        Create a processing order. This endpoint has limited access for special consumers only. It's possible to start manual processes only.

        :param idempotency_id: Unique id of the service call. Should be resent during retries to avoid multiple processing of the same request (required)
        :type idempotency_id: str
        :param processing_order: The metadata of this processing order and their belonging documents. Must be a content-type application/json and schema #/definitions/ProcessingOrderMetadata. It must be the leading part of the multipart request payload followed by the individual documents as referenced in the metadata. (required)
        :type processing_order: bytearray
        :param correlation_id: Free form key controlled by the caller e.g. uuid
        :type correlation_id: str
        :param document_data: The document data itself. You can send multiple documents with different multipart/form-data names; valid content types are: application/pdf, image/tiff or application/xml. The number of documents must match the number of document metadata provided in JSON for multipart/form-data processingOrder.documentMetas
        :type document_data: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_processing_orders_serialize(
            idempotency_id=idempotency_id,
            processing_order=processing_order,
            correlation_id=correlation_id,
            document_data=document_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def create_processing_orders_without_preload_content(
        self,
        idempotency_id: Annotated[StrictStr, Field(description="Unique id of the service call. Should be resent during retries to avoid multiple processing of the same request")],
        processing_order: Annotated[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]], Field(description="The metadata of this processing order and their belonging documents. Must be a content-type application/json and schema #/definitions/ProcessingOrderMetadata. It must be the leading part of the multipart request payload followed by the individual documents as referenced in the metadata.")],
        correlation_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=50)]], Field(description="Free form key controlled by the caller e.g. uuid")] = None,
        document_data: Annotated[Optional[Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]]], Field(description="The document data itself. You can send multiple documents with different multipart/form-data names; valid content types are: application/pdf, image/tiff or application/xml. The number of documents must match the number of document metadata provided in JSON for multipart/form-data processingOrder.documentMetas")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Create a processing order

        Create a processing order. This endpoint has limited access for special consumers only. It's possible to start manual processes only.

        :param idempotency_id: Unique id of the service call. Should be resent during retries to avoid multiple processing of the same request (required)
        :type idempotency_id: str
        :param processing_order: The metadata of this processing order and their belonging documents. Must be a content-type application/json and schema #/definitions/ProcessingOrderMetadata. It must be the leading part of the multipart request payload followed by the individual documents as referenced in the metadata. (required)
        :type processing_order: bytearray
        :param correlation_id: Free form key controlled by the caller e.g. uuid
        :type correlation_id: str
        :param document_data: The document data itself. You can send multiple documents with different multipart/form-data names; valid content types are: application/pdf, image/tiff or application/xml. The number of documents must match the number of document metadata provided in JSON for multipart/form-data processingOrder.documentMetas
        :type document_data: bytearray
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._create_processing_orders_serialize(
            idempotency_id=idempotency_id,
            processing_order=processing_order,
            correlation_id=correlation_id,
            document_data=document_data,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
            '400': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _create_processing_orders_serialize(
        self,
        idempotency_id,
        processing_order,
        correlation_id,
        document_data,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if idempotency_id is not None:
            _header_params['idempotency-id'] = idempotency_id
        if correlation_id is not None:
            _header_params['Correlation-Id'] = correlation_id
        # process the form parameters
        if processing_order is not None:
            _files['processingOrder'] = processing_order
        if document_data is not None:
            _files['documentData'] = document_data
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_client_credential'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def upload_document(
        self,
        idempotency_id: Annotated[StrictStr, Field(description="Unique id of the service call. Should be resent during retries to avoid multiple processing of the same request")],
        document_data: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        correlation_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=50)]], Field(description="Free form key controlled by the caller e.g. uuid")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> UploadDocumentResponse:
        """Upload a document image

        Upload a document image in advance to be used later for posting a new order. This allows to incrementally create orders with multiple and/or large documents.

        :param idempotency_id: Unique id of the service call. Should be resent during retries to avoid multiple processing of the same request (required)
        :type idempotency_id: str
        :param document_data: (required)
        :type document_data: bytearray
        :param correlation_id: Free form key controlled by the caller e.g. uuid
        :type correlation_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._upload_document_serialize(
            idempotency_id=idempotency_id,
            document_data=document_data,
            correlation_id=correlation_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "UploadDocumentResponse",
            '400': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def upload_document_with_http_info(
        self,
        idempotency_id: Annotated[StrictStr, Field(description="Unique id of the service call. Should be resent during retries to avoid multiple processing of the same request")],
        document_data: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        correlation_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=50)]], Field(description="Free form key controlled by the caller e.g. uuid")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[UploadDocumentResponse]:
        """Upload a document image

        Upload a document image in advance to be used later for posting a new order. This allows to incrementally create orders with multiple and/or large documents.

        :param idempotency_id: Unique id of the service call. Should be resent during retries to avoid multiple processing of the same request (required)
        :type idempotency_id: str
        :param document_data: (required)
        :type document_data: bytearray
        :param correlation_id: Free form key controlled by the caller e.g. uuid
        :type correlation_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._upload_document_serialize(
            idempotency_id=idempotency_id,
            document_data=document_data,
            correlation_id=correlation_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "UploadDocumentResponse",
            '400': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def upload_document_without_preload_content(
        self,
        idempotency_id: Annotated[StrictStr, Field(description="Unique id of the service call. Should be resent during retries to avoid multiple processing of the same request")],
        document_data: Union[StrictBytes, StrictStr, Tuple[StrictStr, StrictBytes]],
        correlation_id: Annotated[Optional[Annotated[str, Field(strict=True, max_length=50)]], Field(description="Free form key controlled by the caller e.g. uuid")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Upload a document image

        Upload a document image in advance to be used later for posting a new order. This allows to incrementally create orders with multiple and/or large documents.

        :param idempotency_id: Unique id of the service call. Should be resent during retries to avoid multiple processing of the same request (required)
        :type idempotency_id: str
        :param document_data: (required)
        :type document_data: bytearray
        :param correlation_id: Free form key controlled by the caller e.g. uuid
        :type correlation_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._upload_document_serialize(
            idempotency_id=idempotency_id,
            document_data=document_data,
            correlation_id=correlation_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "UploadDocumentResponse",
            '400': "ErrorResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _upload_document_serialize(
        self,
        idempotency_id,
        document_data,
        correlation_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        if idempotency_id is not None:
            _header_params['idempotency-id'] = idempotency_id
        if correlation_id is not None:
            _header_params['Correlation-Id'] = correlation_id
        # process the form parameters
        if document_data is not None:
            _files['documentData'] = document_data
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    '*/*', 
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params['Content-Type'] = _content_type
        else:
            _default_content_type = (
                self.api_client.select_header_content_type(
                    [
                        'multipart/form-data'
                    ]
                )
            )
            if _default_content_type is not None:
                _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
            'api_client_credential'
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/documents',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


