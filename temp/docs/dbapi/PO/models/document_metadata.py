# coding: utf-8

"""
    dbapi-processingOrders

    Create a document processing order. Limited access for special consumers only.

    The version of the OpenAPI document: v2
    Contact: bank.api@db.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DocumentMetadata(BaseModel):
    """
    DocumentMetadata
    """ # noqa: E501
    document_name: Optional[StrictStr] = Field(default=None, description="The name of the document. Must match the name of the multipart/form-data of the document data itself.", alias="documentName")
    document_reference_id: Optional[StrictStr] = Field(default=None, description="ID of document image upload returned from earlier /documents call", alias="documentReferenceId")
    document_type: StrictStr = Field(description="The type of the document", alias="documentType")
    document_sub_type: StrictStr = Field(description="The sub type of the document", alias="documentSubType")
    __properties: ClassVar[List[str]] = ["documentName", "documentReferenceId", "documentType", "documentSubType"]

    @field_validator('document_type')
    def document_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CAPITAL_GAINS_TAX', 'CARDS', 'CERTIFICATIONS', 'CORRESPONDENCE', 'CURRENT_ACCOUNTS', 'DEPOSIT_ACCOUNTS', 'PARTNERS', 'PROCESSING_ORDERS', 'SECURITY_ACCOUNTS']):
            raise ValueError("must be one of enum values ('CAPITAL_GAINS_TAX', 'CARDS', 'CERTIFICATIONS', 'CORRESPONDENCE', 'CURRENT_ACCOUNTS', 'DEPOSIT_ACCOUNTS', 'PARTNERS', 'PROCESSING_ORDERS', 'SECURITY_ACCOUNTS')")
        return value

    @field_validator('document_sub_type')
    def document_sub_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['SECURITY_ACCOUNTS_OPENING', 'CAPITAL_GAINS_TAX', 'CAPITAL_GAINS_TAX_EXCEMPTION', 'CARDS_OPENING', 'CORRESPONDENCE', 'CURRENT_ACCOUNTS_CHANGE', 'CURRENT_ACCOUNTS_OPENING', 'DEPOSIT_ACCOUNTS_OPENING', 'PARTNERS_AGREEMENT_CONTRACTS', 'PARTNERS_ATTACHMENTS', 'PARTNERS_AUTHORIZED_SIGNER', 'PARTNERS_CHANGE', 'PARTNERS_IDENTIFICATION_PAPER', 'PARTNERS_OPENING', 'PARTNERS_SPECIMEN_SIGNATURE', 'PROCESSING_ORDERS_PAYMENTS', 'PROCESSING_ORDERS_SECURITY', 'SECURITIES', 'SECURITY_ACCOUNTS_CHANGE', 'SECURITY_ACCOUNTS_CLOSURE', 'SECURITY_ACCOUNTS_TRADE_ACT_DOCUMENTATION', 'Kontokorrent_KWH_aufnehmend', 'Kontokorrent_KWH_abgebend']):
            raise ValueError("must be one of enum values ('SECURITY_ACCOUNTS_OPENING', 'CAPITAL_GAINS_TAX', 'CAPITAL_GAINS_TAX_EXCEMPTION', 'CARDS_OPENING', 'CORRESPONDENCE', 'CURRENT_ACCOUNTS_CHANGE', 'CURRENT_ACCOUNTS_OPENING', 'DEPOSIT_ACCOUNTS_OPENING', 'PARTNERS_AGREEMENT_CONTRACTS', 'PARTNERS_ATTACHMENTS', 'PARTNERS_AUTHORIZED_SIGNER', 'PARTNERS_CHANGE', 'PARTNERS_IDENTIFICATION_PAPER', 'PARTNERS_OPENING', 'PARTNERS_SPECIMEN_SIGNATURE', 'PROCESSING_ORDERS_PAYMENTS', 'PROCESSING_ORDERS_SECURITY', 'SECURITIES', 'SECURITY_ACCOUNTS_CHANGE', 'SECURITY_ACCOUNTS_CLOSURE', 'SECURITY_ACCOUNTS_TRADE_ACT_DOCUMENTATION', 'Kontokorrent_KWH_aufnehmend', 'Kontokorrent_KWH_abgebend')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DocumentMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DocumentMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "documentName": obj.get("documentName"),
            "documentReferenceId": obj.get("documentReferenceId"),
            "documentType": obj.get("documentType"),
            "documentSubType": obj.get("documentSubType")
        })
        return _obj


