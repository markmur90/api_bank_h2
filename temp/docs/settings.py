"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
 

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-z*_hrh0ssiq1s5t=dqe5_c6@qfb(fhb!+ruqnvu$mxi4$*m0s4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'drf_yasg',        # drf-yasg para Swagger (opcional)
    'rest_framework',
    'oauth2_provider',
    'rest_framework_simplejwt',
    'corsheaders',     # django-cors-headers (opcional)
    'debug_toolbar',   # django-debug-toolbar (opcional)
    'rest_framework.authtoken',
    'api.accounts',
    'api.collection',
    'api.transactions',
    'api.transfers',
    'api.core',
    'api.authentication',
    'api.sandbox',

]

MIDDLEWARE = [
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    "api.middleware.ExceptionLoggingMiddleware",
    'corsheaders.middleware.CorsMiddleware',  # Agrega esto
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'frontend/templates'],  # Corrige la ruta aquí
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

 
# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASE_SQLITE = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

DATABASE_PSQL = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'swiftapi',       # Nombre de la base de datos
        'USER': 'postgres',           # Nombre de usuario
        'PASSWORD': 'postgres',   # Contraseña del usuario
        # Host de la base de datos (usar 'localhost' si está en la misma máquina)
        'HOST': 'localhost',
        # Puerto de PostgreSQL (por defecto es 5432)
        'PORT': '5432',
    }
}
 
import dj_database_url

# Define DATABASE_URL desde el entorno o usa un valor predeterminado
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://postgresql:postgresql@localhost:5432/swiftapi")

# Configura la base de datos usando dj_database_url
DATABASES_DJ = {
    "default": dj_database_url.config(default=DATABASE_URL)
}

DATABASES = DATABASE_PSQL


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'authentication.CustomUser'

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / 'static',  # Asegúrate de que esta ruta sea correcta
]
STATIC_ROOT = BASE_DIR / 'staticfiles'

STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'

# Configuración de archivos de medios
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ORIGIN_ALLOW_ALL = True

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
        'rest_framework.permissions.AllowAny',
    ),
}

OAUTH2_PROVIDER = {
    'ACCESS_TOKEN_EXPIRE_SECONDS': 3600,
    'OIDC_ENABLED': True,
}


SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ALGORITHM": "HS256",
    "SIGNING_KEY": "Ptf8454Jd55",  # Usa os.getenv() en producción
    "VERIFYING_KEY": "Ptf8454Jd55",
    "AUTH_HEADER_TYPES": ("Bearer",),
}

# Deutsche Bank Sandbox
DEUTSCHE_BANK_API_URL = "http://localhost:8080"
DEUTSCHE_BANK_CLIENT_ID = "SE0IWHFHJFHB848R9E0R9FRUFBCJHW0W9FHF008E88W0457338ASKH64880"
DEUTSCHE_BANK_CLIENT_SECRET = "H858hfhg0ht40588hhfjpfhhd9944940jf"

# Memo Bank Sandbox
MEMO_BANK_API_URL = "http://localhost:8000"
MEMO_BANK_CLIENT_ID = "SE0IWHFHJFHB848R9E0R9FRUFBCJHW0W9FHF008E88W0457338ASKH64880"
MEMO_BANK_CLIENT_SECRET = "H858hfhg0ht40588hhfjpfhhd9944940jf"

# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
        "simple": {
            "format": "{levelname} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "logs", "errors.log"),
            "formatter": "verbose",
        },
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        "django": {
            "handlers": ["file", "console"],
            "level": "WARNING",
            "propagate": True,
        },
        "bank_services": {
            "handlers": ["file", "console"],
            "level": "INFO",
            "propagate": False,
        },
    },
}



# USE_SANDBOX = os.getenv("USE_SANDBOX", "True") == "True"

# DEUTSCHE_BANK_API_URL = "https://0.0.0.0:8080" if not USE_SANDBOX else "http://localhost:8000"

# INTERNAL_IPS = [
#     "localhost",
#     "0.0.0.0",
# ]

