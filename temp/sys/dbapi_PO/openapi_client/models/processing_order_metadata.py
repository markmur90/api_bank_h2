# coding: utf-8

"""
    dbapi-processingOrders

    Create a document processing order. Limited access for special consumers only.

    The version of the OpenAPI document: v2
    Contact: bank.api@db.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.address import Address
from openapi_client.models.document_metadata import DocumentMetadata
from openapi_client.models.natural_person import NaturalPerson
from openapi_client.models.processing_order_metadata_events_inner import ProcessingOrderMetadataEventsInner
from openapi_client.models.processing_order_metadata_order_form_data import ProcessingOrderMetadataOrderFormData
from typing import Optional, Set
from typing_extensions import Self

class ProcessingOrderMetadata(BaseModel):
    """
    The metadata of a processing order.
    """ # noqa: E501
    created_by_system: StrictStr = Field(description="System identifier of the creator", alias="createdBySystem")
    originating_order_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The internal order identification used by the originatign system.", alias="originatingOrderID")
    parent_processing_order_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The unique ID of the order", alias="parentProcessingOrderID")
    processing_order_type: Optional[StrictStr] = Field(default=None, description="The type of the order", alias="processingOrderType")
    input_channel: Optional[Annotated[str, Field(strict=True, max_length=35)]] = Field(default=None, description="The input channel of the order", alias="inputChannel")
    input_originator: Optional[Annotated[str, Field(strict=True, max_length=35)]] = Field(default=None, description="The originator of this input", alias="inputOriginator")
    product_group: Optional[StrictStr] = Field(default=None, description="The product group of this order.", alias="productGroup")
    assigned_to_group: Optional[StrictStr] = Field(default=None, description="Group in charge", alias="assignedToGroup")
    processing_order_priority: Optional[Annotated[int, Field(le=999, strict=True, ge=0)]] = Field(default=None, description="The priority of this order", alias="processingOrderPriority")
    order_note: Optional[StrictStr] = Field(default=None, description="additional information", alias="orderNote")
    iban: Optional[Annotated[str, Field(strict=True)]] = Field(default=None, description="The IBAN of this account.")
    partner: Optional[NaturalPerson] = None
    address: Optional[Address] = None
    order_form_data: Optional[ProcessingOrderMetadataOrderFormData] = Field(default=None, alias="orderFormData")
    events: Optional[List[ProcessingOrderMetadataEventsInner]] = None
    document_metas: List[DocumentMetadata] = Field(alias="documentMetas")
    __properties: ClassVar[List[str]] = ["createdBySystem", "originatingOrderID", "parentProcessingOrderID", "processingOrderType", "inputChannel", "inputOriginator", "productGroup", "assignedToGroup", "processingOrderPriority", "orderNote", "iban", "partner", "address", "orderFormData", "events", "documentMetas"]

    @field_validator('processing_order_type')
    def processing_order_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ADDRESS_CHANGE', 'ARCHIVING']):
            raise ValueError("must be one of enum values ('ADDRESS_CHANGE', 'ARCHIVING')")
        return value

    @field_validator('product_group')
    def product_group_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ADDRESS_CHANGE', 'AUTHORIZED_SIGNER', 'CAPITAL_GAINS_TAX_EXCEMPTION_PROCESSING', 'CONSENT_DECLARATION', 'COUNSELING_DOCUMENTATIONS', 'CREDIT_CARDS', 'CURRENT_ACCOUNTS', 'CURRENT_ACCOUNTS_OPENING', 'DAS_JUNGE_KONTO', 'DB_FESTZINSSPAREN', 'DB_GELDMARKTSPAREN', 'DB_TOPZINSSPAREN', 'DEPOSITS', 'GENERAL_AGREEMENT', 'ONLINE_BANKING', 'OTHER_PROCESSING_ORDERS', 'PARTNERS_CHANGE', 'PARTNERS_OPENING', 'PAYMENTS_PROCESSING_ORDERS', 'SECURITIES_ORDERS_PURCHASE', 'SECURITIES_ORDERS_SELL', 'SECURITIES_ORDERS_SWAP', 'SECURITY_ACCOUNTS', 'SPECIMEN_SIGNATURE', 'TAX_CERTIFICATIONS', 'TAX_IDENTIFICATION_NUMBER', 'TRADE_ACT_DOCUMENTATION_MISC']):
            raise ValueError("must be one of enum values ('ADDRESS_CHANGE', 'AUTHORIZED_SIGNER', 'CAPITAL_GAINS_TAX_EXCEMPTION_PROCESSING', 'CONSENT_DECLARATION', 'COUNSELING_DOCUMENTATIONS', 'CREDIT_CARDS', 'CURRENT_ACCOUNTS', 'CURRENT_ACCOUNTS_OPENING', 'DAS_JUNGE_KONTO', 'DB_FESTZINSSPAREN', 'DB_GELDMARKTSPAREN', 'DB_TOPZINSSPAREN', 'DEPOSITS', 'GENERAL_AGREEMENT', 'ONLINE_BANKING', 'OTHER_PROCESSING_ORDERS', 'PARTNERS_CHANGE', 'PARTNERS_OPENING', 'PAYMENTS_PROCESSING_ORDERS', 'SECURITIES_ORDERS_PURCHASE', 'SECURITIES_ORDERS_SELL', 'SECURITIES_ORDERS_SWAP', 'SECURITY_ACCOUNTS', 'SPECIMEN_SIGNATURE', 'TAX_CERTIFICATIONS', 'TAX_IDENTIFICATION_NUMBER', 'TRADE_ACT_DOCUMENTATION_MISC')")
        return value

    @field_validator('iban')
    def iban_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}", value):
            raise ValueError(r"must validate the regular expression /[A-Z]{2}[0-9]{2}[A-Z0-9]{1,30}/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProcessingOrderMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of partner
        if self.partner:
            _dict['partner'] = self.partner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of address
        if self.address:
            _dict['address'] = self.address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of order_form_data
        if self.order_form_data:
            _dict['orderFormData'] = self.order_form_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in events (list)
        _items = []
        if self.events:
            for _item_events in self.events:
                if _item_events:
                    _items.append(_item_events.to_dict())
            _dict['events'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in document_metas (list)
        _items = []
        if self.document_metas:
            for _item_document_metas in self.document_metas:
                if _item_document_metas:
                    _items.append(_item_document_metas.to_dict())
            _dict['documentMetas'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProcessingOrderMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "createdBySystem": obj.get("createdBySystem"),
            "originatingOrderID": obj.get("originatingOrderID"),
            "parentProcessingOrderID": obj.get("parentProcessingOrderID"),
            "processingOrderType": obj.get("processingOrderType"),
            "inputChannel": obj.get("inputChannel"),
            "inputOriginator": obj.get("inputOriginator"),
            "productGroup": obj.get("productGroup"),
            "assignedToGroup": obj.get("assignedToGroup"),
            "processingOrderPriority": obj.get("processingOrderPriority"),
            "orderNote": obj.get("orderNote"),
            "iban": obj.get("iban"),
            "partner": NaturalPerson.from_dict(obj["partner"]) if obj.get("partner") is not None else None,
            "address": Address.from_dict(obj["address"]) if obj.get("address") is not None else None,
            "orderFormData": ProcessingOrderMetadataOrderFormData.from_dict(obj["orderFormData"]) if obj.get("orderFormData") is not None else None,
            "events": [ProcessingOrderMetadataEventsInner.from_dict(_item) for _item in obj["events"]] if obj.get("events") is not None else None,
            "documentMetas": [DocumentMetadata.from_dict(_item) for _item in obj["documentMetas"]] if obj.get("documentMetas") is not None else None
        })
        return _obj


