from rest_framework import serializers, viewsets
from rest_framework.permissions import IsAuthenticated
from django.shortcuts import render, redirect
from transferencia.models import Transferencia
import requests
from django.contrib.auth import authenticate, login
from django.views.decorators.csrf import csrf_protect
from django.contrib.auth.decorators import login_required
from django.http import HttpResponse
from io import BytesIO
from reportlab.pdfgen import canvas
import os
from reportlab.lib.pagesizes import letter
from rest_framework.decorators import api_view, permission_classes
from rest_framework.permissions import AllowAny
from rest_framework.response import Response
from rest_framework import status, generics
from django.views.decorators.csrf import csrf_exempt
from api_db_swift.config import SWIFT_TRANSFER_URL, CLIENT_ID, CLIENT_SECRET, SWIFT_URL_TOKEN, SWIFT_URL_REFRESH_TOKEN, SWIFT_URL_REVOKE_TOKEN, BANCO_ORIGEN
from api_db_swift import settings
from transferencia.services import generar_pdf_transferencia

class TransferenciaSerializer(serializers.ModelSerializer):
    class Meta:
        model = Transferencia
        fields = '__all__'

class TransferenciaViewSet(viewsets.ModelViewSet):
    queryset = Transferencia.objects.all()
    serializer_class = TransferenciaSerializer
    permission_classes = [IsAuthenticated]

def login_view(request):
    if request.method == "POST":
        username = request.POST.get("username")
        password = request.POST.get("password")
        user = authenticate(request, username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect("dashboard")  # Redirigir a la nueva plantilla
        else:
            return render(request, "login.html", {"error": "Credenciales inválidas"})
    return render(request, "login.html")

@login_required
@csrf_protect
def dashboard_view(request):
    transferencias = Transferencia.objects.filter(usuario=request.user)
    return render(request, "dashboard.html", {"transferencias": transferencias})

@login_required
@csrf_exempt
def transferencia_view(request):
    if request.method == "POST":
        username = request.POST.get('username')
        password = request.POST.get('password')
        token = request.POST.get('token')
        origin_iban = request.POST.get("origin_iban")
        origin_bic = request.POST.get("origin_bic")
        origin_account_number = request.POST.get("origin_account_number")  # Nuevo campo
        origin_account_holder_name = request.POST.get("origin_account_holder_name")  # Nuevo campo
        amount = request.POST.get("amount")
        currency_code = request.POST.get("currency_code")
        counter_party_bank_name = request.POST.get("counter_party_bank_name")
        counter_party_account_number = request.POST.get("counter_party_account_number")
        counter_party_name = request.POST.get("counter_party_name")
        counter_party_bic = request.POST.get("counter_party_bic")
        payment_reference = request.POST.get("payment_reference")
 
        # Guardar en la base de datos (ajustar según el modelo de Transferencia)
        transferencia = Transferencia.objects.create(
            usuario=request.user,
            monto=amount,
            estado="pendiente",
            origin_iban=origin_iban,
            origin_bic=origin_bic,
            origin_account_number=origin_account_number,  # Nuevo campo
            origin_account_holder_name=origin_account_holder_name,  # Nuevo campo
            currency_code=currency_code,
            counter_party_bank_name=counter_party_bank_name,
            counter_party_account_number=counter_party_account_number,
            counter_party_name=counter_party_name,
            counter_party_bic=counter_party_bic,
            payment_reference=payment_reference,
        )
 
        # Enviar los datos al banco en formato JSON
        data = [{
            "origin_iban": origin_iban,
            "origin_bic": origin_bic,
            "amount": float(amount),
            "currency_code": currency_code,
            "counter_party_bank_name": counter_party_bank_name,
            "counter_party_account_number": counter_party_account_number,
            "counter_party_name": counter_party_name,
            "counter_party_bic": counter_party_bic,
            "payment_reference": payment_reference,
        }]
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {token}"
        }
        response = requests.post(SWIFT_TRANSFER_URL, json=data, headers=headers, verify=False)
        
        # Actualizar estado y ID de transacción SWIFT si la transferencia fue exitosa
        if response.status_code == 200:
            transferencia.estado = "completado"
            transferencia.payment_reference = response.json().get("payment_reference", payment_reference)
            transferencia.swift_transaction_id = response.json().get("swift_transaction_id")
        else:
            transferencia.estado = "fallido"
        transferencia.save()

        # Generar PDF y guardar en el directorio media
        pdf_path = generar_pdf_transferencia(transferencia)

        with open(pdf_path, 'rb') as f:
            pdf_data = f.read()

        return HttpResponse(pdf_data, content_type='application/pdf')

    return render(request, "transferencia.html")

@login_required
@csrf_protect
def transferencia_exitosa_view(request):
    return render(request, "transferencia_exitosa.html")

@login_required
@csrf_protect
def dashboard_transferencias_view(request):
    transferencias = Transferencia.objects.filter(usuario=request.user)
    return render(request, "lista_transferencias.html", {"transferencias": transferencias})

@api_view(['GET'])
@permission_classes([IsAuthenticated])
def transferencia_list_view(request):
    transferencias = Transferencia.objects.filter(usuario=request.user)
    serializer = TransferenciaSerializer(transferencias, many=True)
    return Response(serializer.data)

@api_view(['POST'])
@permission_classes([IsAuthenticated])
def transferencia_create_view(request):
    if request.method == 'POST':
        origin_iban = request.data.get("origin_iban")
        origin_bic = request.data.get("origin_bic")
        token = request.POST.get('token')
        origin_account_number = request.data.get("origin_account_number")  # Nuevo campo
        origin_account_holder_name = request.data.get("origin_account_holder_name")  # Nuevo campo
        amount = request.data.get("amount")
        currency_code = request.data.get("currency_code")
        counter_party_bank_name = request.data.get("counter_party_bank_name")
        counter_party_account_number = request.data.get("counter_party_account_number")
        counter_party_name = request.data.get("counter_party_name")
        counter_party_bic = request.data.get("counter_party_bic")
        payment_reference = request.data.get("payment_reference")

        # Guardar en la base de datos (ajustar según el modelo de Transferencia)
        transferencia = Transferencia.objects.create(
            usuario=request.user,
            monto=amount,
            estado="pendiente",
            origin_iban=origin_iban,
            origin_bic=origin_bic,
            origin_account_number=origin_account_number,  # Nuevo campo
            origin_account_holder_name=origin_account_holder_name,  # Nuevo campo
            currency_code=currency_code,
            counter_party_bank_name=counter_party_bank_name,
            counter_party_account_number=counter_party_account_number,
            counter_party_name=counter_party_name,
            counter_party_bic=counter_party_bic,
            payment_reference=payment_reference,
        )

        # Enviar los datos al banco en formato JSON
        data = [{
            "origin_iban": origin_iban,
            "origin_bic": origin_bic,
            "amount": float(amount),
            "currency_code": currency_code,
            "counter_party_bank_name": counter_party_bank_name,
            "counter_party_account_number": counter_party_account_number,
            "counter_party_name": counter_party_name,
            "counter_party_bic": counter_party_bic,
            "payment_reference": payment_reference,
        }]
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {token}"
        }
        response = requests.post(SWIFT_TRANSFER_URL, json=data, headers=headers, verify=False)
        
        # Actualizar estado y ID de transacción SWIFT si la transferencia fue exitosa
        if response.status_code == 200:
            transferencia.estado = "completado"
            transferencia.payment_reference = response.json().get("payment_reference", payment_reference)
            transferencia.swift_transaction_id = response.json().get("swift_transaction_id")
            transferencia.save()
            return Response({"detail": "Transferencia completada"}, status=status.HTTP_201_CREATED)
        return Response({"detail": "Error en la transferencia"}, status=status.HTTP_400_BAD_REQUEST)
    return Response({"detail": "Método no permitido"}, status=status.HTTP_405_METHOD_NOT_ALLOWED)

@api_view(['POST'])
@permission_classes([AllowAny])
def token(request):
    '''
    Gets tokens with username and password. Input should be in the format:
    {"username": "username", "password": "1234abcd"}
    '''
    r = requests.post(SWIFT_URL_TOKEN, 
        data={
            'grant_type': 'password',
            'username': request.data['username'],
            'password': request.data['password'],
            'client_id': CLIENT_ID,
            'client_secret': CLIENT_SECRET,
        },
    )
    return Response(r.json())

@api_view(['POST'])
@permission_classes([AllowAny])
def refresh_token(request):
    '''
    Registers user to the server. Input should be in the format:
    {"refresh_token": "<token>"}
    '''
    r = requests.post(SWIFT_URL_REFRESH_TOKEN, 
        data={
            'grant_type': 'refresh_token',
            'refresh_token': request.data['refresh_token'],
            'client_id': CLIENT_ID,
            'client_secret': CLIENT_SECRET,
        },
    )
    return Response(r.json())

@api_view(['POST'])
@permission_classes([AllowAny])
def revoke_token(request):
    '''
    Method to revoke tokens.
    {"token": "<token>"}
    '''
    r = requests.post(SWIFT_URL_REVOKE_TOKEN, 
        data={
            'token': request.data['token'],
            'client_id': CLIENT_ID,
            'client_secret': CLIENT_SECRET,
        },
    )
    # If it goes well return success message (would be empty otherwise) 
    if r.status_code == requests.codes.ok:
        return Response({'message': 'token revoked'}, r.status_code)
    # Return the error if it goes badly
    return Response(r.json(), r.status_code)