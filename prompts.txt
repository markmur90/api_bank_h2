Eres un ingeniero de software especializado en arquitectura backend, frontend, seguridad informática, diseño de APIs,  y automatización de flujos transaccionales. Tu tarea es analizar y mejorar un sistema de transferencias bancarias que incluye conexión a un simulador bancario. A continuación, se describe lo que debes hacer:

Realizar una auditoría de configuración de seguridad para una red Wi-Fi corporativa, identificando cualquier configuración predeterminada o débil y recomiende las mejores prácticas para endurecer para la empresa:

Auditoría corporativa de la Corporación de Seguridad Wi-Fi Network

Esta auditoría describe los pasos para identificar vulnerabilidades de seguridad en su red de Wi-Fi corporativa y sugiere mejores prácticas para fortalecer sus defensas.

Fase 1: Análisis de red
1. Puntos de acceso de inventario (APS):
- Identifique todos los puntos de acceso (que incluyen los administrados y potencialmente deshonestos).
- Documente sus ubicaciones, modelos, versiones de firmware y configuraciones.
2. Revise las políticas de seguridad:
- Asegúrese de que exista una política de seguridad Wi-Fi documentada, que cubre el control de acceso, los estándares de cifrado, la complejidad de la contraseña y el acceso a la red GUES.
3. Analiza los registros de firewall del último mes de la red de un SME' identificando cualquier patron de acceso inusual o posibles intentos de violación.
4. Revise las alertas de un sistema de detección de intruciones (IDS) durante la última semana para una red gubernamental, clasificando las alertas por severidad y sugiriendo respuestas aplicables para alertas de alta severidad.
5. Examine los registros de correo electrónico en busca de cualquier signo de intentos de phishing en el último mes dentro de una empresa minorista, delineando patrones característicos y sugiriendo un sistema de módulo de capacitación para que los empleados reconozcan tales amenazas.
6. Proporcione una lista de verificación de seguridad detallada para realizar revisiones de código en aplicaciones de Android, centrándose en vulnerabilidades comunes con el manejo inadecuado de sesiones y el almacenamiento de datos inseguros

# ============================
Eres un ingeniero de software especializado en arquitectura backend, frontend, seguridad informática, diseño de APIs,  y automatización de flujos transaccionales. Tu tarea es analizar y mejorar un sistema de transferencias bancarias que incluye conexión a un simulador bancario. A continuación, se describe lo que debes hacer:

1. **Análisis exhaustivo del código existente**
   - Revisa a fondo el archivo `api.gpt4` (simulando el comportamiento de GPT-4 si fuera necesario).
   - Analiza el archivo `conexion_banco.py`, enfocándote especialmente en:
     - Flujo de autenticación.
     - Generación de token desde backend.
     - Integración con el simulador bancario.
     - Gestión de OTP (challenge-response).
     - Envío y estado final de la transferencia.
   - Evalúa cómo se usan las templates actuales y cómo se aplican al proceso de transferencia.

2. **Diseño e implementación de nueva funcionalidad aplicado de acuerdo al entorno y conexion_banco**
   - Crea una nueva plantilla HTML/JS llamada `transfer_send_conexion.html` que sea consistente visualmente con el resto del proyecto.
   - Esta plantilla debe:
     - Mostrar los detalles de la transferencia antes de enviarla.
     - Iniciar la conexión con el simulador bancario.
     - Obtener el token desde el backend.
     - Realizar el challenge para generar el OTP (el cual será resuelto desde el frontend).
     - Enviar la transferencia con todos los datos necesarios.
     - Esperar y mostrar el estado final de la operación.
     - Incluir IP del simulador si aplica.
   - Utiliza estilos y componentes reutilizables para mantener uniformidad con otras pantallas del sistema.

3. **Manejo de configuraciones y flujos alternativos**
   - Implementa un flujo alternativo cuando la variable `ALLOW_FAKE_BANK = True`.
   - Este flujo debe:
     - Crear nuevas rutas y plantillas exclusivas para el modo simulado.
     - Mostrar u ocultar elementos dinámicamente según el estado de esta bandera.
     - Simular procesos como obtención de token, generación de OTP y respuesta de transferencia.
     - Ocultar opciones o componentes no relevantes en este modo.
   - Asegúrate de que el cambio entre modos real/simulado sea transparente para el usuario y seguro en el backend.

4. **Registro de logs**
   - Configura un sistema de logging que guarde:
     - Registros en archivos de texto (`logs/app.log`) por cada ejecución del proceso de transferencia.
     - Registro en base de datos con campos como:
       - Fecha/hora
       - Usuario
       - Detalles de la transacción
       - Estado final
       - Token utilizado
       - IP del simulador (si aplica)
   - Asegúrate de que los logs sean útiles para auditoría y diagnóstico de errores.

5. **Integración técnica**
   - Describe cómo se conecta el frontend con el backend para:
     - Obtener el token.
     - Recibir el desafío (challenge) y enviar el OTP generado.
     - Consultar el estado de la transferencia.
   - Define las nuevas rutas API necesarias, como:
     - `/api/bank_sim/token`
     - `/api/bank_sim/challenge`
     - `/api/bank_sim/send-transfer`
     - `/api/bank_sim/status-transfer`

6. **Consideraciones finales Globales**
   - Todo el desarrollo debe seguir buenas prácticas de seguridad.
   - El OTP debe generarse en frontend tras recibir el challenge, pero validarse en backend.
   - Usa variables de entorno para controlar modos (real/simulado).
   - Mantén compatibilidad con el resto del sistema.

Entrega:
- Un informe técnico del análisis realizado.
- Código fuente de nuevas plantillas y endpoints.
- Diagrama de secuencia del proceso completo.
- Recomendaciones de mejora adicional si aplica.

# ============================
Eres un ingeniero de software especializado en arquitectura backend, frontend, diseño de APIs y automatización de flujos transaccionales. Tu tarea es analizar y mejorar un sistema de transferencias bancarias que se conecta con un **simulador bancario externo alojado en un VPS**. A continuación, se describe lo que debes hacer:

1. **Análisis exhaustivo del código existente**
   - Revisa a fondo el archivo `api.gpt4` (si aplica como interfaz o guía de comportamiento).
   - Analiza el archivo `conexion_banco.py`, enfocándote especialmente en:
     - Conectividad con el VPS donde reside el simulador.
     - Gestión de endpoints REST expuestos por el simulador.
     - Autenticación y obtención de token desde el backend hacia el VPS.
     - Envío de datos de transferencia al simulador.
     - Manejo de respuesta del simulador (ej.: estado de la operación).
     - Generación y validación del OTP mediante challenge-response entre frontend y backend.
   - Evalúa cómo se usan las templates actuales y cómo se aplican al proceso de transferencia.

2. **Diseño e implementación de nueva funcionalidad aplicado de acuerdo al entorno y conexion_banco**
   - Crea una nueva plantilla HTML/JS llamada `transfer_send_conexion.html` que sea consistente visualmente con el resto del proyecto.
   - Esta plantilla debe:
     - Mostrar los detalles de la transferencia antes de enviarla.
     - Iniciar la conexión con el simulador bancario en el VPS.
     - Obtener el token desde el backend (hacia el VPS) de forma segura.
     - Realizar el challenge para generar el OTP (el cual será resuelto desde el frontend).
     - Enviar la transferencia con todos los datos necesarios al VPS.
     - Esperar y mostrar el estado final de la operación.
     - Registrar y mostrar la IP pública del VPS si aplica.
   - Utiliza estilos y componentes reutilizables para mantener uniformidad con otras pantallas del sistema.

3. **Manejo de configuraciones y flujos alternativos**
   - Implementa un flujo alternativo cuando la variable `ALLOW_FAKE_BANK = True`.
   - Este flujo debe:
     - Crear nuevas rutas y plantillas exclusivas para el modo simulado local (sin conexión al VPS).
     - Mostrar u ocultar elementos dinámicamente según el estado de esta bandera.
     - Simular procesos como obtención de token, generación de OTP y respuesta de transferencia.
     - Ocultar opciones o componentes no relevantes en este modo.
   - Asegúrate de que el cambio entre modos real (VPS)/simulado sea transparente para el usuario y seguro en el backend.

4. **Registro de logs**
   - Configura un sistema de logging que guarde:
     - Registros en archivos de texto (`logs/app.log`) por cada ejecución del proceso de transferencia.
     - Registro en base de datos con campos como:
       - Fecha/hora
       - Usuario
       - Detalles de la transacción
       - Estado final
       - Token utilizado
       - IP del VPS (si aplica)
       - Respuesta del simulador
   - Asegúrate de que los logs sean útiles para auditoría y diagnóstico de errores.

5. **Integración técnica con el VPS**
   - Describe cómo se establece la conexión desde tu backend hacia el VPS:
     - Uso de HTTPS con certificado válido (si aplica).
     - Validación de certificados SSL/TLS si el VPS tiene dominio seguro.
     - Manejo de errores de conexión (timeout, denegado, etc.).
   - Define las nuevas rutas API necesarias, como:
     - `/api/bank_sim/token` → Obtiene token del simulador en el VPS.
     - `/api/bank_sim/challenge` → Recibe el desafío del VPS.
     - `/api/bank_sim/send-transfer` → Envia la transferencia al VPS.
     - `/api/bank_sim/status-transfer` → Consulta el estado de la transferencia.

6. **Seguridad y buenas prácticas**
   - Todo el desarrollo debe seguir buenas prácticas de seguridad:
     - Uso de variables de entorno para claves sensibles.
     - Protección contra inyecciones y ataques CSRF/XSS.
     - Validación de respuestas del VPS.
     - Límites de intentos de OTP.
     - Manejo seguro de tokens temporales.

7. **Consideraciones finales Globales aplica a todo el gpt4, entorno y conexión**
   - Usa variables de entorno para controlar modos (real/simulado).
   - Mantén compatibilidad con el resto del sistema.
   - El OTP debe generarse en frontend tras recibir el challenge, pero validarse en backend.
   - Si el VPS requiere IP blanca, asegúrate de registrar la IP pública del servidor que hace la conexión.

Entrega:
- Un informe técnico del análisis realizado.
- Código fuente de nuevas plantillas y endpoints.
- Diagrama de secuencia del proceso completo (desde frontend hasta el VPS).
- Recomendaciones de mejora adicional si aplica.



Eres un ingeniero en prompts revisa y unifica estos 2 prompts para mi, donde la API se ejecuta en Local, y el Simulador en un VPS, estoy generando un zip con los 2 proyectos en basados en Django los 2, debe adicionar un frontend al simulador, 
# ============================
API
# ============================
Eres un ingeniero de software especializado en arquitectura backend, frontend, diseño de APIs y automatización de flujos transaccionales. Tu tarea es analizar y mejorar un sistema de transferencias bancarias que se conecta con un **simulador bancario externo alojado en un VPS**. A continuación, se describe lo que debes hacer:

1. **Análisis exhaustivo del código existente**
   - Revisa a fondo el archivo `api.gpt4` (si aplica como interfaz o guía de comportamiento).
   - Analiza el archivo `conexion_banco.py`, enfocándote especialmente en:
     - Conectividad con el VPS donde reside el simulador.
     - Gestión de endpoints REST expuestos por el simulador.
     - Autenticación y obtención de token desde el backend hacia el VPS.
     - Envío de datos de transferencia al simulador.
     - Manejo de respuesta del simulador (ej.: estado de la operación).
     - Generación y validación del OTP mediante challenge-response entre frontend y backend.
   - Evalúa cómo se usan las templates actuales y cómo se aplican al proceso de transferencia.

2. **Diseño e implementación de nueva funcionalidad aplicado de acuerdo al entorno y conexion_banco**
   - Crea una nueva plantilla HTML/JS llamada `transfer_send_conexion.html` que sea consistente visualmente con el resto del proyecto.
   - Esta plantilla debe:
     - Mostrar los detalles de la transferencia antes de enviarla.
     - Iniciar la conexión con el simulador bancario en el VPS.
     - Obtener el token desde el backend (hacia el VPS) de forma segura.
     - Realizar el challenge para generar el OTP (el cual será resuelto desde el frontend).
     - Enviar la transferencia con todos los datos necesarios al VPS.
     - Esperar y mostrar el estado final de la operación.
     - Registrar y mostrar la IP pública del VPS si aplica.
   - Utiliza estilos y componentes reutilizables para mantener uniformidad con otras pantallas del sistema.

3. **Manejo de configuraciones y flujos alternativos**
   - Implementa un flujo alternativo cuando la variable `ALLOW_FAKE_BANK = True`.
   - Este flujo debe:
     - Crear nuevas rutas y plantillas exclusivas para el modo simulado local (sin conexión al VPS).
     - Mostrar u ocultar elementos dinámicamente según el estado de esta bandera.
     - Simular procesos como obtención de token, generación de OTP y respuesta de transferencia.
     - Ocultar opciones o componentes no relevantes en este modo.
   - Asegúrate de que el cambio entre modos real (VPS)/simulado sea transparente para el usuario y seguro en el backend.

4. **Registro de logs**
   - Configura un sistema de logging que guarde:
     - Registros en archivos de texto (`logs/app.log`) por cada ejecución del proceso de transferencia.
     - Registro en base de datos con campos como:
       - Fecha/hora
       - Usuario
       - Detalles de la transacción
       - Estado final
       - Token utilizado
       - IP del VPS (si aplica)
       - Respuesta del simulador
   - Asegúrate de que los logs sean útiles para auditoría y diagnóstico de errores.

5. **Integración técnica con el VPS**
   - Describe cómo se establece la conexión desde tu backend hacia el VPS:
     - Uso de HTTPS con certificado válido (si aplica).
     - Validación de certificados SSL/TLS si el VPS tiene dominio seguro.
     - Manejo de errores de conexión (timeout, denegado, etc.).
   - Define las nuevas rutas API necesarias, como:
     - `/api/bank_sim/token` → Obtiene token del simulador en el VPS.
     - `/api/bank_sim/challenge` → Recibe el desafío del VPS.
     - `/api/bank_sim/send-transfer` → Envia la transferencia al VPS.
     - `/api/bank_sim/status-transfer` → Consulta el estado de la transferencia.

6. **Seguridad y buenas prácticas**
   - Todo el desarrollo debe seguir buenas prácticas de seguridad:
     - Uso de variables de entorno para claves sensibles.
     - Protección contra inyecciones y ataques CSRF/XSS.
     - Validación de respuestas del VPS.
     - Límites de intentos de OTP.
     - Manejo seguro de tokens temporales.

7. **Consideraciones finales Globales aplica a todo el gpt4, entorno y conexión**
   - Usa variables de entorno para controlar modos (real/simulado).
   - Mantén compatibilidad con el resto del sistema.
   - El OTP debe generarse en frontend tras recibir el challenge, pero validarse en backend.
   - Si el VPS requiere IP blanca, asegúrate de registrar la IP pública del servidor que hace la conexión.

Entrega:
- Un informe técnico del análisis realizado.
- Código fuente de nuevas plantillas y endpoints.
- Diagrama de secuencia del proceso completo (desde frontend hasta el VPS).
- Recomendaciones de mejora adicional si aplica.

# ============================
SIMULADOR
# ============================
Eres un ingeniero DevOps especializado en arquitectura de servidores, seguridad, automatización y despliegue de aplicaciones web en entornos Linux. Tu tarea es analizar a fondo el servidor bancario alojado en un VPS, con foco en el flujo de transferencias bancarias (obtención de token, generación de OTP y ejecución de la transacción) y en la configuración técnica del entorno de producción donde corren varios servicios en simultáneo.

1. **Análisis del flujo de transferencia bancaria**
   - Revisa paso a paso el proceso de transferencia desde el frontend hasta el backend:
     - Cómo se obtiene el token de autenticación (proceso completo).
     - Cómo se recibe el challenge y se genera el OTP (responsabilidad frontend/backend).
     - Cómo se envían los datos de la transferencia al simulador o sistema bancario.
     - Cómo se recibe y procesa la respuesta final del servidor bancario.
     - Cómo se notifica al usuario del resultado (éxito/error).

2. **Revisión de interfaces y plantillas**
   - Evalúa las páginas relacionadas:
     - Página de navegación principal del sistema bancario.
     - Plantilla de confirmación y ejecución de transferencia (`transfer_send.html`, `confirm_transfer.html`, etc.).
   - Verifica que estén correctamente integradas con:
     - Backend (endpoints API).
     - Generación dinámica de OTP.
     - Comunicación segura con el backend.
   - Identifica posibles errores de UX/UI o inconsistencias visuales.

3. **Configuración técnica del VPS**
   - Analiza cómo están configurados los siguientes servicios en el VPS, asegurando que funcionen correctamente en paralelo:
     - **Gunicorn**: como servidor WSGI para la aplicación Python.
     - **Nginx**: como proxy inverso y gestor de conexiones HTTPS.
     - **Supervisor**: para manejar el reinicio automático de servicios.
     - **Fail2Ban**: protección contra ataques de fuerza bruta y accesos no autorizados.
     - **Certbot (Let’s Encrypt)**: renovación automática de certificados SSL/TLS.
     - **Tor** (si aplica): para anonimización de tráfico o acceso seguro al sistema.
   - Describe cómo estos servicios interactúan entre sí y cómo se gestionan conflictos de puertos o recursos.

4. **Archivos de configuración clave**
   - Revisa y valida los archivos de configuración relevantes según el repositorio del proyecto:
     - `/etc/nginx/sites-available/banco.conf`
     - `/etc/supervisor/conf.d/banco.conf`
     - `/etc/systemd/system/banco.service` (si aplica)
     - `/etc/fail2ban/jail.local`
     - Archivos de configuración de certbot (ej.: `/etc/letsencrypt`)
     - Configuración de Tor (ej.: `/etc/tor/torrc`)
   - Asegúrate de que los directorios de logs, permisos y usuarios sean correctos.
   - Incluye recomendaciones si hay incompatibilidades o riesgos de seguridad.

5. **Manejo de dependencias y actualizaciones**
   - Revisa cómo se gestionan las dependencias del proyecto:
     - Uso de `requirements.txt` o `Pipfile`.
     - Actualizaciones automáticas o manuales.
     - Manejo de variables de entorno y claves sensibles (ej.: `.env`).
   - Propón buenas prácticas para mantener el sistema seguro y actualizado.

6. **Consideraciones de seguridad y rendimiento**
   - Asegúrate de que:
     - Se usen certificados SSL válidos y actualizados.
     - Los tokens tengan tiempo limitado de vida y sean únicos por sesión.
     - El OTP tenga un número limitado de intentos fallidos.
     - Las IPs maliciosas sean bloqueadas automáticamente por Fail2Ban.
     - No haya fugas de información sensible en logs ni respuestas HTTP.

7. **Entrega esperada**
   - Informe técnico detallado que incluya:
     - Diagrama del flujo de transferencia bancaria (token → OTP → transferencia → estado).
     - Lista de archivos y configuraciones revisadas.
     - Recomendaciones técnicas de mejora o corrección.
     - Posibles conflictos entre servicios y cómo resolverlos.
     - Buenas prácticas sugeridas para mantenimiento y monitoreo continuo.

Tu análisis debe servir como base para garantizar una operación estable, segura y escalable del servidor bancario en el VPS, optimizando el uso de recursos y minimizando puntos de fallo.

# ============================


Eres un ingeniero full-stack especializado en arquitectura backend, frontend, DevOps y automatización de flujos transaccionales , con experiencia en Django, entornos Linux, APIs REST y seguridad web. Tu tarea es analizar, mejorar e integrar dos proyectos basados en Django :   

    API Local:  Servidor backend que gestiona transferencias bancarias y se conecta a un simulador externo.  
    Simulador Bancario en VPS:  Aplicación que simula un sistema bancario real, expone endpoints y requiere configuración avanzada del servidor.
     

Ambos proyectos deben ser empaquetados en un archivo ZIP  listo para despliegue o migración futura. Además, debes desarrollar un frontend funcional para el simulador bancario  alojado en el VPS. 
🔍 1. Análisis del Sistema Completo 

Realiza un análisis exhaustivo de ambos proyectos: 
📦 Proyecto API Local 

    Revisa los archivos clave:
        api.gpt4 (si aplica como guía).
        conexion_banco.py: Conectividad con el VPS, autenticación, envío de datos y manejo de OTP.
         
    Evalúa las plantillas actuales y su uso en el proceso de transferencia.
     

💻 Simulador en VPS 

    Analiza cómo funciona el flujo completo de transferencia desde el frontend hasta el backend:
        Obtención de token.
        Generación de OTP (challenge-response).
        Envío y procesamiento de la transferencia.
        Recepción y notificación del estado final.
         
    Evalúa las interfaces actuales (transfer_send.html, etc.) y propón mejoras UX/UI si aplica.
     

🛠️ 2. Desarrollo Frontend para el Simulador en VPS 

Crea un nuevo frontend para el simulador bancario alojado en el VPS: 

    Diseña una plantilla HTML/JS llamada transfer_simulator_frontend.html.
    Incluye:
        Formulario de prueba de transferencia.
        Visualización de estados (token, challenge, OTP, resultado).
        Botones para simular respuestas exitosas/error.
         
    Asegúrate de mantener consistencia visual con el resto del sistema.
    Integra estilos reutilizables y componentes dinámicos.
     

🌐 3. Integración API Local ↔ Simulador VPS 

Define y configura la comunicación segura entre ambos sistemas: 

    Establece cómo se obtiene el token desde el backend local hacia el VPS.
    Implementa el flujo de generación de OTP mediante challenge-response.
    Define nuevas rutas API en el backend local:
        /api/bank_sim/token
        /api/bank_sim/challenge
        /api/bank_sim/send-transfer
        /api/bank_sim/status-transfer
         
     

Asegúrate de: 

    Usar HTTPS con certificados válidos.
    Validar certificados SSL/TLS si el VPS tiene dominio seguro.
    Manejar errores de conexión (timeout, denegado, etc.).
     

🧪 4. Modo Simulado Local (ALLOW_FAKE_BANK) 

Implementa un modo alternativo para desarrollo o pruebas locales cuando ALLOW_FAKE_BANK = True: 

    Crea nuevas rutas y plantillas exclusivas para este modo.
    Simula:
        Autenticación y obtención de token.
        Generación de OTP.
        Respuesta del simulador (éxito/error).
         
    Oculta opciones irrelevantes en este modo.
    Mantén compatibilidad con el resto del sistema.
     

📋 5. Registro de Logs y Auditoría 

Configura un sistema integral de logs: 

    Archivos de texto: logs/app.log
    Base de datos con campos:
        Fecha/hora
        Usuario
        Detalles de la transacción
        Estado final
        Token utilizado
        IP del VPS (si aplica)
        Respuesta del simulador
         
     

Asegúrate de que los logs sean útiles para auditorías y diagnóstico de fallos. 
⚙️ 6. Configuración Técnica del VPS 

Analiza y documenta la infraestructura del VPS donde corre el simulador bancario: 

    Describe cómo están configurados estos servicios:
        Gunicorn  – servidor WSGI.
        Nginx  – proxy inverso y HTTPS.
        Supervisor  – control de procesos.
        Fail2Ban  – protección contra ataques.
        Certbot (Let’s Encrypt)  – certificados SSL.
        Tor  (opcional) – anonimización de tráfico.
         
     

Revisa archivos de configuración clave: 

    /etc/nginx/sites-available/banco.conf
    /etc/supervisor/conf.d/banco.conf
    /etc/fail2ban/jail.local
    Certificados Let's Encrypt
    Configuración de Tor (si aplica)
     

Propón ajustes de rendimiento, seguridad y resolución de conflictos entre servicios. 
🧩 7. Gestión de Dependencias y Seguridad 

Evalúa cómo se gestionan las dependencias y claves sensibles: 

    Uso de requirements.txt, Pipfile, .env, etc.
    Actualizaciones automáticas o manuales.
    Protección contra inyecciones, CSRF/XSS.
    Límites de intentos de OTP.
    Expiración de tokens temporales.
     

Incluye buenas prácticas para mantenimiento continuo y actualizaciones seguras. 
📁 8. Empaquetado Final 

Genera un archivo ZIP que contenga: 

    Código fuente del proyecto API Local.
    Código fuente del simulador bancario en el VPS (incluyendo el nuevo frontend).
    Documentación técnica y guía de instalación/despliegue.
    Diagrama de secuencia del flujo completo de transferencia (desde frontend hasta el VPS).
     

📄 Entrega Final 

Tu entrega debe incluir: 

✅ Informe técnico detallado del análisis realizado.
✅ Código fuente de nuevas plantillas, vistas y endpoints.
✅ Diagrama de secuencia del proceso completo (token → OTP → transferencia → estado).
✅ Recomendaciones técnicas de mejora, seguridad y escalabilidad.
✅ Lista de archivos y configuraciones revisadas.
✅ Guía de instalación y despliegue del paquete ZIP.

# ============================

"Revisa a fondo el proyecto Django proporcionado, que corresponde a un simulador bancario web  con las siguientes características clave: 

    El sistema permite que los clientes ingresen mediante autenticación por usuario y contraseña , validando credenciales y generando un token de sesión seguro .
    Antes de realizar transferencias, se implementa un challenge de OTP (One-Time Password)  como capa adicional de seguridad.
    Una vez confirmada la transferencia, se ejecuta el proceso correspondiente y se devuelve una respuesta clara al cliente o API consumidora.
    Incluye un dashboard administrativo  desde el cual se pueden crear y gestionar clientes, acreedores, transacciones y otros datos esenciales del sistema.
    Debe recibir transferencias entrantes desde backends externos (por ejemplo, por Internet), procesándolas correctamente según lógica bancaria simulada.
    Utiliza SQLite  como base de datos principal.
    No utiliza REST Framework ni APIs RESTful; todo el frontend está construido con HTML y plantillas Django  de buen diseño, siguiendo estándares actuales de usabilidad y experiencia de usuario.
      

Tu labor consiste en: 

    Analizar exhaustivamente  el código actual: 
        Verificar estructura del proyecto (aplicaciones, directorios, archivos).
        Evaluar modelos de datos, vistas, formularios, URLs, templates, settings y seguridad.
        Identificar errores, bugs, código redundante, malas prácticas, posibles vulnerabilidades de seguridad y puntos de mejora.
          

    Refactorizar completamente  el proyecto para dejarlo totalmente funcional, seguro, bien organizado y escalable, aplicando lo siguiente: 
        Implementación correcta de autenticación y manejo de sesiones seguras.
        Generación, envío y verificación de tokens OTP (pueden ser simulados si no hay integración real con SMS/email).
        Lógica clara y segura para validar y procesar transferencias.
        Dashboard intuitivo y seguro para la gestión de usuarios, acreedores y transacciones.
        Recepción y procesamiento adecuado de transferencias entrantes desde sistemas externos (simuladas o reales).
        Diseño limpio y moderno en las plantillas HTML, usando estándares actuales de UX/UI (sin frameworks frontend como React, solo HTML, CSS y JS básico si aplica).
        Cumplimiento de buenas prácticas de seguridad: protección contra CSRF, XSS, inyecciones SQL, configuración segura de settings.py, etc.
        Manejo correcto de errores, logs y mensajes de usuario claros.
          

    Realizar pruebas internas completas  de todas las funcionalidades antes de entregar el proyecto corregido: 
        Pruebas manuales o automatizadas de inicio de sesión, autenticación multifactor (OTP), creación de clientes, transferencias, recepción de transacciones, etc.
        Validación de que cada parte funciona correctamente tanto individualmente como en conjunto.
          

    Documentar los cambios realizados , incluyendo: 
        Explicación de qué partes se corrigieron y por qué.
        Instrucciones claras para instalar, configurar y ejecutar el proyecto tras la refactorización.
        Recomendaciones futuras si fuera necesario.
          
      

Al finalizar, entrega el proyecto completamente funcional, probado y listo para ejecutarse localmente sin errores." 
  
# ============================

"Revisa a fondo el proyecto Django proporcionado, que corresponde a un simulador bancario web  con las siguientes características clave: 

    El sistema permite que los clientes ingresen mediante autenticación por usuario y contraseña , validando credenciales y generando un token de sesión seguro .
    Antes de realizar transferencias, se implementa un challenge de OTP (One-Time Password)  como capa adicional de seguridad.
    Una vez confirmada la transferencia, se ejecuta el proceso correspondiente y se devuelve una respuesta clara al cliente o API consumidora.
    Incluye un dashboard administrativo  desde el cual se pueden crear y gestionar clientes, acreedores, transacciones y otros datos esenciales del sistema.
    Debe recibir transferencias entrantes desde backends externos (por ejemplo, por Internet), procesándolas correctamente según lógica bancaria simulada.
    Utiliza SQLite  como base de datos principal.
    No utiliza REST Framework ni APIs RESTful; todo el frontend está construido con HTML y plantillas Django  de buen diseño, siguiendo estándares actuales de usabilidad y experiencia de usuario.
      

Para comprender mejor la estructura y comportamiento esperado de ciertas funcionalidades, toma como referencia los archivos JSON ubicados en la carpeta docs/swagger , los cuales describen esquemas y flujos lógicos similares a los que debería seguir el sistema. 

Tu labor consiste en: 

    Analizar exhaustivamente  el código actual: 
        Verificar estructura del proyecto (aplicaciones, directorios, archivos).
        Evaluar modelos de datos, vistas, formularios, URLs, templates, settings y seguridad.
        Identificar errores, bugs, código redundante, malas prácticas, posibles vulnerabilidades de seguridad y puntos de mejora.
        Comparar la implementación actual con los esquemas definidos en los archivos de docs/swagger para validar coherencia.
          

    Refactorizar completamente  el proyecto para dejarlo totalmente funcional, seguro, bien organizado y escalable, aplicando lo siguiente: 
        Implementación correcta de autenticación y manejo de sesiones seguras.
        Generación, envío y verificación de tokens OTP (pueden ser simulados si no hay integración real con SMS/email).
        Lógica clara y segura para validar y procesar transferencias.
        Dashboard intuitivo y seguro para la gestión de usuarios, acreedores y transacciones.
        Recepción y procesamiento adecuado de transferencias entrantes desde sistemas externos (simuladas o reales).
        Diseño limpio y moderno en las plantillas HTML, usando estándares actuales de UX/UI (sin frameworks frontend como React, solo HTML, CSS y JS básico si aplica).
        Cumplimiento de buenas prácticas de seguridad: protección contra CSRF, XSS, inyecciones SQL, configuración segura de settings.py, etc.
        Manejo correcto de errores, logs y mensajes de usuario claros.
          

    Realizar pruebas internas completas  de todas las funcionalidades antes de entregar el proyecto corregido: 
        Pruebas manuales o automatizadas de inicio de sesión, autenticación multifactor (OTP), creación de clientes, transferencias, recepción de transacciones, etc.
        Validación de que cada parte funciona correctamente tanto individualmente como en conjunto.
        Asegúrate de que la funcionalidad implementada coincida con los flujos y estructuras definidas en los archivos JSON de docs/swagger.
          

    Documentar los cambios realizados , incluyendo: 
        Explicación de qué partes se corrigieron y por qué.
        Instrucciones claras para instalar, configurar y ejecutar el proyecto tras la refactorización.
        Recomendaciones futuras si fuera necesario.
          
      

Al finalizar, entrega el proyecto completamente funcional, probado y listo para ejecutarse localmente sin errores, con una interfaz limpia, segura y alineada a los estándares actuales." 

# ============================

🧠 Prompt Final: Revisión, Refactorización y Documentación Completa del Proyecto Django - Simulador Bancario  

  "Revisa a fondo el proyecto Django proporcionado, que corresponde a un simulador bancario web . Actualmente contiene una estructura mínima funcional, pero presenta múltiples deficiencias en términos de seguridad, arquitectura, completitud funcional, mantenibilidad y documentación. 

    El repositorio actual tiene los siguientes problemas críticos: 

        Configuración insegura :   
            SECRET_KEY y otras claves sensibles están codificadas directamente en settings.py, en lugar de cargarse desde variables de entorno.  
            DEBUG = True está habilitado permanentemente.  
            ALLOWED_HOSTS = ['*'] lo cual es inseguro para producción.
             

        Modelos incompletos o rotos :   
            Existe un modelo OTPChallenge, pero las vistas hacen referencia a modelos inexistentes como DeudorSimulado, AcreedorSimulado, etc., causando errores de importación.  
            No se han generado migraciones para los modelos existentes.  
            Se requiere diferenciar entre modelos de prueba/simulación y modelos reales (si aplica).
             

        Autenticación y OTP :   
            La autenticación no está completamente implementada.  
            No existe lógica funcional de generación ni validación de OTP.  
            No hay entrega simulada por correo/SMS.  
            Debe usarse login() de Django correctamente, y asegurar cookies seguras (SESSION_COOKIE_SECURE, CSRF_COOKIE_SECURE) cuando corresponda.
             

        Seguridad general :   
            Vistas innecesariamente decoradas con @csrf_exempt.  
            Un script llamado generar_jwt.py dentro de middleware/ que debe eliminarse o convertirse en un comando personalizado de Django.  
            Middleware con JWT hardcodeado.
             

        Frontend básico e inconsistente :   
            Las plantillas HTML son muy básicas y necesitan mejoras de diseño, UX/UI moderna.  
            El sitio de administración existe, pero carece de datos, formularios adecuados y navegabilidad intuitiva.
             

        Endpoints incompletos y sin protección :   
            Se necesita un endpoint protegido (con sesión o JWT) para recibir transferencias entrantes desde backends externos.  
            Este endpoint debe validar datos y crear objetos de transferencia usando transfer_services.TransferService.
             

        Falta de pruebas e instrucciones :   
            No hay tests unitarios ni funcionales.  
            No hay un archivo README.md con instrucciones claras de instalación, configuración y ejecución.  
            No hay documentación sobre cómo simular el envío de OTP durante el desarrollo.
  
    🔨 Tareas requeridas durante la refactorización completa:  
      1. Estructura del proyecto  

          Organiza el proyecto siguiendo buenas prácticas de Django: separación clara de apps, directorios de templates, static, settings, etc.
          Elimina archivos/scripts obsoletos o conviértelos en comandos personalizados (management/commands).
          Crea modelos faltantes (DeudorSimulado, AcreedorSimulado, etc.) o elimina referencias si no son necesarios.
          Genera todas las migraciones necesarias para cada modelo.
          

      2. Seguridad  

          Mueve SECRET_KEY, JWT_SECRET_KEY y cualquier clave sensible a variables de entorno.
          Desactiva DEBUG y restringe ALLOWED_HOSTS.
          Asegúrate de usar CsrfViewMiddleware y elimina @csrf_exempt donde no sea necesario.
          Usa cookies seguras (SESSION_COOKIE_SECURE, CSRF_COOKIE_SECURE) cuando se use HTTPS.
          Configura protección contra ataques XSS, CSRF, inyecciones SQL, etc.
          

      3. Autenticación y OTP  

          Implementa correctamente el flujo de autenticación con usuario y contraseña.
          Crea un servicio de generación y validación de OTP (en consola o email/SMS simulado para desarrollo).
          Usa login() de Django correctamente y crea una vista de logout para cerrar sesiones.
          Maneja tokens de sesión de forma segura.
          

      4. Panel de control y transferencias  

          Construye formularios con Django.forms o crispy-forms para mejorar UX y validación.
          Implementa un dashboard funcional para crear clientes, acreedores y transacciones.
          Registra transferencias en un modelo LogTransferencia y muéstralas en el panel de administración.
          Garantiza procesamiento idempotente y estados claros de transferencias (PENDIENTE, CONFIRMADA, RECHAZADA, etc.).
          

      5. Transferencias entrantes  

          Crea un endpoint seguro (ej. /api/transferencias/entrantes/) que acepte JSON y valide con JWT o sesión activa.
          Utiliza transfer_services.TransferService para crear nuevas transferencias desde este endpoint.
          Valida datos de entrada y responde con códigos HTTP apropiados.
          

      6. Plantillas y diseño  

          Mejora significativamente el diseño de las plantillas HTML, manteniendo compatibilidad con Django templates.
          Usa CSS limpio y moderno, sin frameworks frontend como React o Vue.
          Mantén consistencia visual y accesibilidad básica.
          

      7. Documentación  

          Crea un archivo README.md con:
              Instrucciones paso a paso para instalar el proyecto: virtualenv, dependencias, variables de entorno, migraciones.
              Descripción del flujo de OTP y cómo simularlo durante el desarrollo.
              Explicación de cómo probar manualmente las principales funcionalidades.
              
          Incluye instrucciones sobre cómo ejecutar pruebas una vez escritas (futuras).
          

      8. Pruebas internas  

          Realiza pruebas manuales exhaustivas antes de entregar:
              Inicio de sesión seguro.
              Validación de OTP.
              Creación de usuarios, acreedores, transferencias.
              Recepción de transferencias desde sistemas externos.
              Cierre de sesión y manejo de errores.
              
          

      9. Organización del código  

          Separa responsabilidades: servicios, utilidades, managers, etc.
          Renombra funciones, clases y archivos que tengan nombres ambiguos o incorrectos.
          Comenta partes críticas del código y deja documentación interna clara.
        

    📦 Entrega final esperada: 

        Código completamente refactorizado, funcional y seguro.
        Archivos actualizados:
            settings.py: con variables de entorno y configuraciones seguras.
            urls.py, views.py, models.py: organizados, limpios y funcionales.
            Plantillas HTML mejoradas.
            Archivo README.md completo.
            Estructura de migraciones generada.
            
        Pruebas realizadas y verificación de funcionalidad completa.
        Recomendaciones adicionales (opcional) para futuras mejoras.

