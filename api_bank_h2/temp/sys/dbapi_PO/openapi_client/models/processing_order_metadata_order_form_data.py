# coding: utf-8

"""
    dbapi-processingOrders

    Create a document processing order. Limited access for special consumers only.

    The version of the OpenAPI document: v2
    Contact: bank.api@db.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ProcessingOrderMetadataOrderFormData(BaseModel):
    """
    Structured form data associated with this processing order. The actual form elements in orderData depend on a particular form's structure, which is referenced in name/version. The form structure to be used for a given processing order will be agreed upon during on-boarding.
    """ # noqa: E501
    name: Annotated[str, Field(strict=True, max_length=50)] = Field(description="Order form structure (ADT) name, that defines the fields contained in orderData.")
    version: Annotated[int, Field(strict=True, ge=0)] = Field(description="Order form structure (ADT) version, that defines the fields contained in orderData.")
    product: Annotated[str, Field(strict=True, max_length=50)] = Field(description="Product classification of this form.")
    action: Annotated[str, Field(strict=True, max_length=50)] = Field(description="Action sub classification of this form.")
    data: Dict[str, Dict[str, Any]] = Field(description="Form content as JSON object properties with type string. The property names and values format depend on the order form structure (ADT).")
    __properties: ClassVar[List[str]] = ["name", "version", "product", "action", "data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProcessingOrderMetadataOrderFormData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProcessingOrderMetadataOrderFormData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "version": obj.get("version"),
            "product": obj.get("product"),
            "action": obj.get("action"),
            "data": obj.get("data")
        })
        return _obj


