# coding: utf-8

"""
    dbapi-sepaCreditTransfer

    Easily initiate SEPA credit transfer then if required cancel or get the status and get the details afterwards.

    The version of the OpenAPI document: v1
    Contact: bank.api@db.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.creditor import Creditor
from openapi_client.models.creditor_account import CreditorAccount
from openapi_client.models.creditor_agent import CreditorAgent
from openapi_client.models.debtor import Debtor
from openapi_client.models.debtor_account import DebtorAccount
from openapi_client.models.instructed_amount import InstructedAmount
from openapi_client.models.payment_identification import PaymentIdentification
from typing import Optional, Set
from typing_extensions import Self

class SepaCreditTransferRequest(BaseModel):
    """
    SepaCreditTransferRequest
    """ # noqa: E501
    purpose_code: Optional[Annotated[str, Field(min_length=4, strict=True, max_length=4)]] = Field(default=None, description="ExternalPurpose1Code", alias="purposeCode")
    requested_execution_date: Optional[date] = Field(default=None, description="must match yyyy-MM-dd format, also in CET timezone.", alias="requestedExecutionDate")
    debtor: Debtor
    debtor_account: DebtorAccount = Field(alias="debtorAccount")
    payment_identification: Optional[PaymentIdentification] = Field(default=None, alias="paymentIdentification")
    instructed_amount: InstructedAmount = Field(alias="instructedAmount")
    creditor_agent: CreditorAgent = Field(alias="creditorAgent")
    creditor: Creditor
    creditor_account: CreditorAccount = Field(alias="creditorAccount")
    remittance_information_structured: Optional[Annotated[str, Field(strict=True, max_length=140)]] = Field(default=None, description="recommended to be used in each transaction ; contract related - references to the business; it depends on the client what they want to include", alias="remittanceInformationStructured")
    remittance_information_unstructured: Optional[Annotated[str, Field(strict=True, max_length=140)]] = Field(default=None, description="recommended to be used in each transaction ; contract related : references to the business; it depends on the client what they want to include", alias="remittanceInformationUnstructured")
    __properties: ClassVar[List[str]] = ["purposeCode", "requestedExecutionDate", "debtor", "debtorAccount", "paymentIdentification", "instructedAmount", "creditorAgent", "creditor", "creditorAccount", "remittanceInformationStructured", "remittanceInformationUnstructured"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SepaCreditTransferRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of debtor
        if self.debtor:
            _dict['debtor'] = self.debtor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of debtor_account
        if self.debtor_account:
            _dict['debtorAccount'] = self.debtor_account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_identification
        if self.payment_identification:
            _dict['paymentIdentification'] = self.payment_identification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of instructed_amount
        if self.instructed_amount:
            _dict['instructedAmount'] = self.instructed_amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creditor_agent
        if self.creditor_agent:
            _dict['creditorAgent'] = self.creditor_agent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creditor
        if self.creditor:
            _dict['creditor'] = self.creditor.to_dict()
        # override the default output from pydantic by calling `to_dict()` of creditor_account
        if self.creditor_account:
            _dict['creditorAccount'] = self.creditor_account.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SepaCreditTransferRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "purposeCode": obj.get("purposeCode"),
            "requestedExecutionDate": obj.get("requestedExecutionDate"),
            "debtor": Debtor.from_dict(obj["debtor"]) if obj.get("debtor") is not None else None,
            "debtorAccount": DebtorAccount.from_dict(obj["debtorAccount"]) if obj.get("debtorAccount") is not None else None,
            "paymentIdentification": PaymentIdentification.from_dict(obj["paymentIdentification"]) if obj.get("paymentIdentification") is not None else None,
            "instructedAmount": InstructedAmount.from_dict(obj["instructedAmount"]) if obj.get("instructedAmount") is not None else None,
            "creditorAgent": CreditorAgent.from_dict(obj["creditorAgent"]) if obj.get("creditorAgent") is not None else None,
            "creditor": Creditor.from_dict(obj["creditor"]) if obj.get("creditor") is not None else None,
            "creditorAccount": CreditorAccount.from_dict(obj["creditorAccount"]) if obj.get("creditorAccount") is not None else None,
            "remittanceInformationStructured": obj.get("remittanceInformationStructured"),
            "remittanceInformationUnstructured": obj.get("remittanceInformationUnstructured")
        })
        return _obj


